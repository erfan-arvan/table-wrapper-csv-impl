+ PROJECT_PATH=../dataset/post_wpi_with_s_table-wrapper-csv-impl
+ CF_BINARY=../scripts/tools/checker-framework-3.34.0/checker/bin/javac
+ COMPILED_CLASSES_FOLDER=../dataset/post_wpi_with_s_table-wrapper-csv-impl/classes
+ LIB_FOLDER=../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib
+ SRC_FILES=../dataset/post_wpi_with_s_table-wrapper-csv-impl/cf_srcs.txt
+ CLASSPATH_DIR=../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ echo 'CF_BINARY: ../scripts/tools/checker-framework-3.34.0/checker/bin/javac'
CF_BINARY: ../scripts/tools/checker-framework-3.34.0/checker/bin/javac
+ unzip_jars ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ local lib_folder=../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib
+ local extract_to=../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ '[' -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath ']'
+ rm -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ mkdir -p ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/apiguardian-api-1.1.2.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/byte-buddy-1.14.2.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/byte-buddy-agent-1.14.1.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/checker-qual-3.42.0.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/equalsverifier-3.14.1.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/junit-jupiter-5.9.2.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/junit-jupiter-api-5.9.2.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/junit-jupiter-engine-5.9.2.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/junit-jupiter-params-5.9.2.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/junit-platform-commons-1.9.2.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/junit-platform-engine-1.9.2.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/lombok-1.18.32.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/mockito-core-5.2.0.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/mockito-junit-jupiter-5.2.0.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/objenesis-3.3.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/opentest4j-1.2.0.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/slf4j-api-2.0.7.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/table-wrapper-api-2023.1.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ for jar_file in '"$lib_folder"/*.jar'
+ unzip -o -q ../dataset/post_wpi_with_s_table-wrapper-csv-impl/lib/univocity-parsers-2.9.1.jar -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath
+ find ../dataset/post_wpi_with_s_table-wrapper-csv-impl/src -name '*.java'
+ BUILD_CMD='../scripts/tools/checker-framework-3.34.0/checker/bin/javac -processor org.checkerframework.checker.nullness.NullnessChecker -AassumePure -Adetailedmsgtext -Aajava=../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out -Ainfer=ajava -Awarns -AshowPrefixInWarningMessages -J-Xmx32G -Xmaxerrs 10000 -g -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classes -cp ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath @../dataset/post_wpi_with_s_table-wrapper-csv-impl/cf_srcs.txt'
+ CLEAN_CMD='rm -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classes'
+ ../scripts/tools/checker-framework-3.34.0/checker/bin/javac -processor org.checkerframework.checker.nullness.NullnessChecker -AassumePure -Adetailedmsgtext -Aajava=../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out -Ainfer=ajava -Awarns -AshowPrefixInWarningMessages -J-Xmx32G -Xmaxerrs 10000 -g -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classes -cp ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath @../dataset/post_wpi_with_s_table-wrapper-csv-impl/cf_srcs.txt
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvReportPage.java:100: warning: (override.param) $$ 7 $$ cellValuePredicate $$ @Initialized @NonNull Predicate<@Initialized @NonNull Object> $$ @Initialized @NonNull Predicate<@Initialized @Nullable Object> $$ @Initialized @NonNull CsvReportPage $$ @Initialized @NonNull TableCellAddress find(@Initialized @NonNull CsvReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @NonNull Object> p4) $$ @Initialized @NonNull ReportPage $$ @Initialized @NonNull TableCellAddress find(@Initialized @NonNull ReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @Nullable Object> p4) $$ ( 3813, 3850 ) $$ Incompatible parameter type for cellValuePredicate.
                                 Predicate< Object> cellValuePredicate) {
                                                    ^
  found   : @Initialized @NonNull Predicate<@Initialized @NonNull Object>
  required: @Initialized @NonNull Predicate<@Initialized @Nullable Object>
  Consequence: method in @Initialized @NonNull CsvReportPage
    @Initialized @NonNull TableCellAddress find(@Initialized @NonNull CsvReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @NonNull Object> p4)
  cannot override method in @Initialized @NonNull ReportPage
    @Initialized @NonNull TableCellAddress find(@Initialized @NonNull ReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @Nullable Object> p4)
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableRow.java:90: warning: (return) $$ 2 $$ @Initialized @Nullable TableCell $$ @Initialized @NonNull TableCell $$ ( 2887, 2907 ) $$ incompatible types in return.
                    return getCell(cellIndex++);
                                  ^
  type of expression: @Initialized @Nullable TableCell
  method return type: @Initialized @NonNull TableCell
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableCell.java:36: warning: (assignment) $$ 2 $$ @Initialized @Nullable String $$ @UnknownInitialization @NonNull String $$ ( 1528, 1558 ) $$ incompatible types in assignment.
        String cellValue = getCellValue(row, columnIndex);
                                       ^
  found   : @Initialized @Nullable String
  required: @UnknownInitialization @NonNull String
3 warnings
+ WPITEMPDIR=../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ WPIOUTDIR=build/whole-program-inference
+ DEBUG=1
+ rm -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ mkdir -p ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ rm -f iteration1.diff iteration2.diff iteration3.diff iteration4.diff iteration5.diff iteration6.diff iteration7.diff
+ WPIITERATIONOUTPUTS=../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-iterations
+ rm -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-iterations
+ mkdir -p ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-iterations
+ count=1
+ :
+ [[ 1 == 1 ]]
+ SECONDS=0
+ echo 'entering iteration 1'
entering iteration 1
+ ../scripts/tools/checker-framework-3.34.0/checker/bin/javac -processor org.checkerframework.checker.nullness.NullnessChecker -AassumePure -Adetailedmsgtext -Aajava=../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out -Ainfer=ajava -Awarns -AshowPrefixInWarningMessages -J-Xmx32G -Xmaxerrs 10000 -g -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classes -cp ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath @../dataset/post_wpi_with_s_table-wrapper-csv-impl/cf_srcs.txt
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvReportPage.java:100: warning: (override.param) $$ 7 $$ cellValuePredicate $$ @Initialized @NonNull Predicate<@Initialized @NonNull Object> $$ @Initialized @NonNull Predicate<@Initialized @Nullable Object> $$ @Initialized @NonNull CsvReportPage $$ @Initialized @NonNull TableCellAddress find(@Initialized @NonNull CsvReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @NonNull Object> p4) $$ @Initialized @NonNull ReportPage $$ @Initialized @NonNull TableCellAddress find(@Initialized @NonNull ReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @Nullable Object> p4) $$ ( 3813, 3850 ) $$ Incompatible parameter type for cellValuePredicate.
                                 Predicate< Object> cellValuePredicate) {
                                                    ^
  found   : @Initialized @NonNull Predicate<@Initialized @NonNull Object>
  required: @Initialized @NonNull Predicate<@Initialized @Nullable Object>
  Consequence: method in @Initialized @NonNull CsvReportPage
    @Initialized @NonNull TableCellAddress find(@Initialized @NonNull CsvReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @NonNull Object> p4)
  cannot override method in @Initialized @NonNull ReportPage
    @Initialized @NonNull TableCellAddress find(@Initialized @NonNull ReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @Nullable Object> p4)
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvReportPage.java:106: warning: (return) $$ 2 $$ @Initialized @Nullable CsvTableRow $$ @Initialized @NonNull CsvTableRow $$ ( 4040, 4103 ) $$ incompatible types in return.
        return (i < 0 || i >= rows.length) ? null : CsvTableRow.of(rows[i], i);
                                           ^
  type of expression: @Initialized @Nullable CsvTableRow
  method return type: @Initialized @NonNull CsvTableRow
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableRow.java:48: warning: (return) $$ 2 $$ null (NullType) $$ @Initialized @NonNull TableCell $$ ( 1832, 1836 ) $$ incompatible types in return.
            return null;
                   ^
  type of expression: null (NullType)
  method return type: @Initialized @NonNull TableCell
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableRow.java:60: warning: (return) $$ 2 $$ @Initialized @Nullable String $$ @Initialized @NonNull String $$ ( 2085, 2127 ) $$ incompatible types in return.
        return (i < 0 || i >= row.length) ? null : row[i];
                                          ^
  type of expression: @Initialized @Nullable String
  method return type: @Initialized @NonNull String
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableRow.java:74: warning: (override.param) $$ 7 $$ value $$ @Initialized @NonNull Object $$ @Initialized @Nullable Object $$ @Initialized @NonNull CsvTableRow $$ @Initialized @NonNull boolean rowContains(@Initialized @NonNull CsvTableRow this, @Initialized @NonNull Object p0) $$ @Initialized @NonNull ReportPageRow $$ @Initialized @NonNull boolean rowContains(@Initialized @NonNull ReportPageRow this, @Initialized @Nullable Object p0) $$ ( 2366, 2378 ) $$ Incompatible parameter type for value.
    public boolean rowContains( Object value) {
                                       ^
  found   : @Initialized @NonNull Object
  required: @Initialized @Nullable Object
  Consequence: method in @Initialized @NonNull CsvTableRow
    @Initialized @NonNull boolean rowContains(@Initialized @NonNull CsvTableRow this, @Initialized @NonNull Object p0)
  cannot override method in @Initialized @NonNull ReportPageRow
    @Initialized @NonNull boolean rowContains(@Initialized @NonNull ReportPageRow this, @Initialized @Nullable Object p0)
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableCell.java:42: warning: (return) $$ 2 $$ @Initialized @Nullable String $$ @Initialized @NonNull String $$ ( 1774, 1848 ) $$ incompatible types in return.
        return (columnIndex >= 0) && (columnIndex < row.length) ? row[columnIndex] : null;
                                                                ^
  type of expression: @Initialized @Nullable String
  method return type: @Initialized @NonNull String
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject.java:36: warning: (return) $$ 2 $$ @Initialized @Nullable String $$ @Initialized @NonNull String $$ ( 1580, 1636 ) $$ incompatible types in return.
        return (cellIndex == null) ? null : row.getCellValue(cellIndex);
                                   ^
  type of expression: @Initialized @Nullable String
  method return type: @Initialized @NonNull String
7 warnings
+ rm -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classes
+ mkdir -p ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ mkdir -p build/whole-program-inference
++ diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out build/whole-program-inference
++ true
+ DIFF_RESULT='Only in build/whole-program-inference: org'
+ [[ 1 == 1 ]]
++ realpath iteration1.diff
realpath: iteration1.diff: No such file or directory
+ echo 'putting the diff for iteration 1 into '
putting the diff for iteration 1 into 
+ echo Only in build/whole-program-inference: org
+ [[ Only in build/whole-program-inference: org != '' ]]
+ rm -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ mv build/whole-program-inference ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ mkdir -p ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-iterations/iteration1
+ cp -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-iterations/iteration1
+ echo 'ending iteration 1, time taken: 3 seconds'
ending iteration 1, time taken: 3 seconds
+ echo

+ (( count++ ))
+ '[' 2 -eq 11 ']'
+ :
+ [[ 1 == 1 ]]
+ SECONDS=0
+ echo 'entering iteration 2'
entering iteration 2
+ ../scripts/tools/checker-framework-3.34.0/checker/bin/javac -processor org.checkerframework.checker.nullness.NullnessChecker -AassumePure -Adetailedmsgtext -Aajava=../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out -Ainfer=ajava -Awarns -AshowPrefixInWarningMessages -J-Xmx32G -Xmaxerrs 10000 -g -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classes -cp ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath @../dataset/post_wpi_with_s_table-wrapper-csv-impl/cf_srcs.txt
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/AbstractTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 37,col 1): annotateTypeParameters: mismatched sizes:  typeParameters (size 1)=[R extends ReportPageRow];  typeArguments (size 2)=[R extends ReportPageRow, C extends Object];  decl=@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker") public abstract class AbstractTable<R extends ReportPageRow> implements Table {      private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(AbstractTable.class);      protected final AbstractReportPage<R> reportPage;      protected final String tableName;      private final TableCellRange tableRange;      private final Map<TableColumn, Integer> headerDescription;      private final boolean empty;      private final int dataRowOffset;      @org.checkerframework.dataflow.qual.Impure     protected AbstractTable(AbstractReportPage<R> reportPage, String tableName, TableCellRange tableRange, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {         this.reportPage = reportPage;         this.tableName = tableName;         this.dataRowOffset = 1 + headersRowCount;         this.empty = isEmpty(tableRange, dataRowOffset);         this.headerDescription = this.empty ? Collections.emptyMap() : getHeaderDescription(reportPage, tableRange, headerDescription, headersRowCount);         this.tableRange = empty ? tableRange : new TableCellRange(tableRange.getFirstRow(), tableRange.getLastRow(), getColumnIndices(this.headerDescription).min().orElse(tableRange.getFirstColumn()), getColumnIndices(this.headerDescription).max().orElse(tableRange.getLastColumn()));     }      @org.checkerframework.dataflow.qual.SideEffectFree     protected AbstractTable(AbstractTable<R> table, int appendDataRowsToTop, int appendDataRowsToBottom) {         this.reportPage = table.reportPage;         this.tableName = table.tableName;         this.tableRange = table.tableRange.addRowsToTop(appendDataRowsToTop).addRowsToBottom(appendDataRowsToBottom);         this.dataRowOffset = table.dataRowOffset;         this.empty = isEmpty(tableRange, dataRowOffset);         this.headerDescription = table.headerDescription;     }      @org.checkerframework.dataflow.qual.Pure     private static boolean isEmpty(TableCellRange tableRange, int dataRowOffset) {         return tableRange.equals(TableCellRange.EMPTY_RANGE) || (getNumberOfTableRows(tableRange) - dataRowOffset) <= 0;     }      @org.checkerframework.dataflow.qual.Pure     private static int getNumberOfTableRows(TableCellRange tableRange) {         return tableRange.getLastRow() - tableRange.getFirstRow() + 1;     }      @org.checkerframework.dataflow.qual.Impure     private static Map<TableColumn, Integer> getHeaderDescription(AbstractReportPage<?> reportPage, TableCellRange tableRange, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {         Map<TableColumn, Integer> columnIndices = new HashMap<>();         ReportPageRow[] headerRows = new ReportPageRow[headersRowCount];         for (int i = 0; i < headersRowCount; i++) {             headerRows[i] = reportPage.getRow(tableRange.getFirstRow() + 1 + i);         }         TableColumn[] columns = Arrays.stream(headerDescription.getEnumConstants()).map(TableColumnDescription::getColumn).toArray(TableColumn[]::new);         for (TableColumn column : columns) {             columnIndices.put(column, column.getColumnIndex(headerRows));         }         return Collections.unmodifiableMap(columnIndices);     }      @org.checkerframework.dataflow.qual.Impure     private static IntStream getColumnIndices(Map<TableColumn, Integer> headerDescription) {         return headerDescription.values().stream().mapToInt(i -> i).filter(i -> i != TableColumn.NOCOLUMN_INDEX);     }      @org.checkerframework.dataflow.qual.Impure     public <T> List<T> getData(AbstractTable<R> this, Object report, Function<TableRow, T> rowExtractor) {         return getDataCollection(report, (row, data) -> {             T result = rowExtractor.apply(row);             if (result != null) {                 data.add(result);             }         });     }      @org.checkerframework.dataflow.qual.Impure     public <T> List<T> getDataCollection(AbstractTable<R> this, Object report, Function<TableRow, Collection<T>> rowExtractor) {         return getDataCollection(report, (row, data) -> {             Collection<T> result = rowExtractor.apply(row);             if (result != null) {                 data.addAll(result);             }         });     }      @org.checkerframework.dataflow.qual.Impure     public <T> List<T> getDataCollection(AbstractTable<R> this, Object report, Function<TableRow, Collection<T>> rowExtractor, BiPredicate<T, T> equalityChecker, BiFunction<T, T, Collection<T>> mergeDuplicates) {         return getDataCollection(report, (row, data) -> {             Collection<T> result = rowExtractor.apply(row);             if (result != null) {                 for (T r : result) {                     addWithEqualityChecker(r, data, equalityChecker, mergeDuplicates);                 }             }         });     }      @org.checkerframework.dataflow.qual.Impure     private <T> List<T> getDataCollection(AbstractTable<R> this, Object report, BiConsumer<TableRow, Collection<T>> rowHandler) {         List<T> data = new ArrayList<>();         for (TableRow row : this) {             if (row != null) {                 try {                     rowHandler.accept(row, data);                 } catch (Exception e) {                     log.warn("Не могу распарсить таблицу \'{}\' в {}, строка {}", tableName, report, row.getRowNum() + 1, e);                 }             }         }         return data;     }      @org.checkerframework.dataflow.qual.Impure     public static <T> void addWithEqualityChecker(T element, Collection<T> collection, BiPredicate<T, T> equalityChecker, BiFunction<T, T, Collection<T>> duplicatesMerger) {         T equalsObject = null;         for (T e : collection) {             if (equalityChecker.test(e, element)) {                 equalsObject = e;                 break;             }         }         if (equalsObject != null) {             collection.remove(equalsObject);             collection.addAll(duplicatesMerger.apply(equalsObject, element));         } else {             collection.add(element);         }     }      @org.checkerframework.dataflow.qual.Impure     public Stream<TableRow> stream(AbstractTable<R> this) {         return StreamSupport.stream(spliterator(), false);     }      @org.checkerframework.dataflow.qual.Pure     public Iterator<TableRow> iterator(AbstractTable<R> this) {         return new TableIterator();     }      protected class TableIterator implements Iterator<TableRow> {          private final MutableTableRow<R> tableRow = new MutableTableRow<>(AbstractTable.this, getCellDataAccessObject());          private final int numberOfRows = getNumberOfTableRows(tableRange);          private int i = dataRowOffset;          @org.checkerframework.dataflow.qual.Pure         public boolean hasNext(TableIterator this) {             return i < numberOfRows;         }          @org.checkerframework.dataflow.qual.Impure         public TableRow next(TableIterator this) {             R row;             do {                 row = getRow(tableRange.getFirstRow() + (i++));             } while (row == null && hasNext());             tableRow.setRow(row);             return tableRow;         }     }      @org.checkerframework.dataflow.qual.Pure     public R getRow(AbstractTable<R> this, int i) {         return reportPage.getRow(i);     }      @org.checkerframework.dataflow.qual.Impure     public TableRow findRow(AbstractTable<R> this, Object value) {         TableCellAddress address = reportPage.find(value);         return getMutableTableRow(address);     }      @org.checkerframework.dataflow.qual.Impure     public TableRow findRowByPrefix(AbstractTable<R> this, String prefix) {         TableCellAddress address = reportPage.findByPrefix(prefix);         return getMutableTableRow(address);     }      @org.checkerframework.dataflow.qual.Impure     private MutableTableRow<R> getMutableTableRow(AbstractTable<R> this, TableCellAddress address) {         if (tableRange.contains(address)) {             MutableTableRow<R> tableRow = new MutableTableRow<>(this, getCellDataAccessObject());             tableRow.setRow(getRow(address.getRow()));             return tableRow;         }         return null;     }      @org.checkerframework.dataflow.qual.Pure     protected abstract CellDataAccessObject<?, R> getCellDataAccessObject(AbstractTable<R> this);      @org.checkerframework.dataflow.qual.Pure     public java.lang.String toString() {         return "AbstractTable(tableName=" + this.tableName + ")";     }      @org.checkerframework.dataflow.qual.Pure     public AbstractReportPage<R> getReportPage() {         return this.reportPage;     }      @org.checkerframework.dataflow.qual.Pure     public TableCellRange getTableRange() {         return this.tableRange;     }      @org.checkerframework.dataflow.qual.Pure     public Map<TableColumn, Integer> getHeaderDescription() {         return this.headerDescription;     }      @org.checkerframework.dataflow.qual.Pure     public boolean isEmpty() {         return this.empty;     } };  elt=org.spacious_team.table_wrapper.api.AbstractTable (class com.sun.tools.javac.code.Symbol$ClassSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/AbstractTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 60,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure protected AbstractTable(AbstractReportPage<R> reportPage, String tableName, TableCellRange tableRange, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     this.reportPage = reportPage;     this.tableName = tableName;     this.dataRowOffset = 1 + headersRowCount;     this.empty = isEmpty(tableRange, dataRowOffset);     this.headerDescription = this.empty ? Collections.emptyMap() : getHeaderDescription(reportPage, tableRange, headerDescription, headersRowCount);     this.tableRange = empty ? tableRange : new TableCellRange(tableRange.getFirstRow(), tableRange.getLastRow(), getColumnIndices(this.headerDescription).min().orElse(tableRange.getFirstColumn()), getColumnIndices(this.headerDescription).max().orElse(tableRange.getLastColumn())); };  elt=<T>AbstractTable(org.spacious_team.table_wrapper.api.AbstractReportPage<R>,java.lang.String,org.spacious_team.table_wrapper.api.TableCellRange,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/AbstractTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 72,col 29): Mismatch in type argument size between AbstractTable<R> (1) and AbstractTable<R extends ReportPageRow, C extends Object> (2)
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/AbstractTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 91,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure private static Map<TableColumn, Integer> getHeaderDescription(AbstractReportPage<?> reportPage, TableCellRange tableRange, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     Map<TableColumn, Integer> columnIndices = new HashMap<>();     ReportPageRow[] headerRows = new ReportPageRow[headersRowCount];     for (int i = 0; i < headersRowCount; i++) {         headerRows[i] = reportPage.getRow(tableRange.getFirstRow() + 1 + i);     }     TableColumn[] columns = Arrays.stream(headerDescription.getEnumConstants()).map(TableColumnDescription::getColumn).toArray(TableColumn[]::new);     for (TableColumn column : columns) {         columnIndices.put(column, column.getColumnIndex(headerRows));     }     return Collections.unmodifiableMap(columnIndices); };  elt=<T>getHeaderDescription(org.spacious_team.table_wrapper.api.AbstractReportPage<?>,org.spacious_team.table_wrapper.api.TableCellRange,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/AbstractTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 196,col 43): Mismatch in type argument size between MutableTableRow<R> (1) and MutableTableRow<C extends Object, R extends ReportPageRow> (2)
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/AbstractTable-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 37,col 1): annotateTypeParameters: mismatched sizes:  typeParameters (size 1)=[R extends ReportPageRow];  typeArguments (size 2)=[R extends ReportPageRow, C extends Object];  decl=@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker") public abstract class AbstractTable<R extends ReportPageRow> implements Table {      private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(AbstractTable.class);      @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     protected final AbstractReportPage<R> reportPage;      @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     protected final String tableName;      @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     private final TableCellRange tableRange;      @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     private final Map<TableColumn, Integer> headerDescription;      @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     private final boolean empty;      @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     private final int dataRowOffset;      @org.checkerframework.dataflow.qual.Impure     protected AbstractTable(AbstractReportPage<R> reportPage, String tableName, TableCellRange tableRange, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {         this.reportPage = reportPage;         this.tableName = tableName;         this.dataRowOffset = 1 + headersRowCount;         this.empty = isEmpty(tableRange, dataRowOffset);         this.headerDescription = this.empty ? Collections.emptyMap() : getHeaderDescription(reportPage, tableRange, headerDescription, headersRowCount);         this.tableRange = empty ? tableRange : new TableCellRange(tableRange.getFirstRow(), tableRange.getLastRow(), getColumnIndices(this.headerDescription).min().orElse(tableRange.getFirstColumn()), getColumnIndices(this.headerDescription).max().orElse(tableRange.getLastColumn()));     }      @org.checkerframework.dataflow.qual.SideEffectFree     protected AbstractTable(AbstractTable<R> table, int appendDataRowsToTop, int appendDataRowsToBottom) {         this.reportPage = table.reportPage;         this.tableName = table.tableName;         this.tableRange = table.tableRange.addRowsToTop(appendDataRowsToTop).addRowsToBottom(appendDataRowsToBottom);         this.dataRowOffset = table.dataRowOffset;         this.empty = isEmpty(tableRange, dataRowOffset);         this.headerDescription = table.headerDescription;     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     private static boolean isEmpty(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableCellRange tableRange, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int dataRowOffset) {         return tableRange.equals(TableCellRange.EMPTY_RANGE) || (getNumberOfTableRows(tableRange) - dataRowOffset) <= 0;     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     private static int getNumberOfTableRows(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableCellRange tableRange) {         return tableRange.getLastRow() - tableRange.getFirstRow() + 1;     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     private static Map<TableColumn, Integer> getHeaderDescription(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractReportPage<?> reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableCellRange tableRange, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int headersRowCount) {         Map<TableColumn, Integer> columnIndices = new HashMap<>();         ReportPageRow[] headerRows = new ReportPageRow[headersRowCount];         for (int i = 0; i < headersRowCount; i++) {             headerRows[i] = reportPage.getRow(tableRange.getFirstRow() + 1 + i);         }         TableColumn[] columns = Arrays.stream(headerDescription.getEnumConstants()).map(TableColumnDescription::getColumn).toArray(TableColumn[]::new);         for (TableColumn column : columns) {             columnIndices.put(column, column.getColumnIndex(headerRows));         }         return Collections.unmodifiableMap(columnIndices);     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     private static IntStream getColumnIndices(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Map<TableColumn, Integer> headerDescription) {         return headerDescription.values().stream().mapToInt(i -> i).filter(i -> i != TableColumn.NOCOLUMN_INDEX);     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public <T> List<T> getData(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTable<R> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object report, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Function<TableRow, T> rowExtractor) {         return getDataCollection(report, (row, data) -> {             T result = rowExtractor.apply(row);             if (result != null) {                 data.add(result);             }         });     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public <T> List<T> getDataCollection(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTable<R> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object report, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Function<TableRow, Collection<T>> rowExtractor) {         return getDataCollection(report, (row, data) -> {             Collection<T> result = rowExtractor.apply(row);             if (result != null) {                 data.addAll(result);             }         });     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public <T> List<T> getDataCollection(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTable<R> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object report, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Function<TableRow, Collection<T>> rowExtractor, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BiPredicate<T, T> equalityChecker, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BiFunction<T, T, Collection<T>> mergeDuplicates) {         return getDataCollection(report, (row, data) -> {             Collection<T> result = rowExtractor.apply(row);             if (result != null) {                 for (T r : result) {                     addWithEqualityChecker(r, data, equalityChecker, mergeDuplicates);                 }             }         });     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     private <T> List<T> getDataCollection(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object report, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BiConsumer<TableRow, Collection<T>> rowHandler) {         List<T> data = new ArrayList<>();         for (TableRow row : this) {             if (row != null) {                 try {                     rowHandler.accept(row, data);                 } catch (Exception e) {                     log.warn("Не могу распарсить таблицу \'{}\' в {}, строка {}", tableName, report, row.getRowNum() + 1, e);                 }             }         }         return data;     }      @org.checkerframework.dataflow.qual.Impure     public static <T> void addWithEqualityChecker(T element, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Collection<T> collection, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BiPredicate<T, T> equalityChecker, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BiFunction<T, T, Collection<T>> duplicatesMerger) {         T equalsObject = null;         for (T e : collection) {             if (equalityChecker.test(e, element)) {                 equalsObject = e;                 break;             }         }         if (equalsObject != null) {             collection.remove(equalsObject);             collection.addAll(duplicatesMerger.apply(equalsObject, element));         } else {             collection.add(element);         }     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public Stream<TableRow> stream(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTable<R> this) {         return StreamSupport.stream(spliterator(), false);     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public Iterator<TableRow> iterator(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTable<R> this) {         return new TableIterator();     }      protected class TableIterator implements Iterator<TableRow> {          @org.checkerframework.checker.initialization.qual.Initialized         @org.checkerframework.checker.nullness.qual.NonNull         private final MutableTableRow<R> tableRow = new MutableTableRow<>(AbstractTable.this, getCellDataAccessObject());          @org.checkerframework.checker.initialization.qual.Initialized         @org.checkerframework.checker.nullness.qual.NonNull         private final int numberOfRows = getNumberOfTableRows(tableRange);          @org.checkerframework.checker.initialization.qual.Initialized         @org.checkerframework.checker.nullness.qual.NonNull         private int i = dataRowOffset;          @org.checkerframework.dataflow.qual.Pure         @org.checkerframework.checker.initialization.qual.Initialized         @org.checkerframework.checker.nullness.qual.NonNull         public boolean hasNext(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableIterator this) {             return i < numberOfRows;         }          @org.checkerframework.dataflow.qual.Impure         @org.checkerframework.checker.initialization.qual.Initialized         @org.checkerframework.checker.nullness.qual.NonNull         public TableRow next(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableIterator this) {             R row;             do {                 row = getRow(tableRange.getFirstRow() + (i++));             } while (row == null && hasNext());             tableRow.setRow(row);             return tableRow;         }     }      @org.checkerframework.dataflow.qual.Pure     public R getRow(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTable<R> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int i) {         return reportPage.getRow(i);     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.Nullable     public TableRow findRow(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTable<R> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object value) {         TableCellAddress address = reportPage.find(value);         return getMutableTableRow(address);     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.Nullable     public TableRow findRowByPrefix(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTable<R> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String prefix) {         TableCellAddress address = reportPage.findByPrefix(prefix);         return getMutableTableRow(address);     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.Nullable     private MutableTableRow<R> getMutableTableRow(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableCellAddress address) {         if (tableRange.contains(address)) {             MutableTableRow<R> tableRow = new MutableTableRow<>(this, getCellDataAccessObject());             tableRow.setRow(getRow(address.getRow()));             return tableRow;         }         return null;     }      @org.checkerframework.dataflow.qual.Pure     protected abstract CellDataAccessObject<?, R> getCellDataAccessObject();      @org.checkerframework.dataflow.qual.Pure     public java.lang.String toString() {         return "AbstractTable(tableName=" + this.tableName + ")";     }      @org.checkerframework.dataflow.qual.Pure     public AbstractReportPage<R> getReportPage() {         return this.reportPage;     }      @org.checkerframework.dataflow.qual.Pure     public TableCellRange getTableRange() {         return this.tableRange;     }      @org.checkerframework.dataflow.qual.Pure     public Map<TableColumn, Integer> getHeaderDescription() {         return this.headerDescription;     }      @org.checkerframework.dataflow.qual.Pure     public boolean isEmpty() {         return this.empty;     } };  elt=org.spacious_team.table_wrapper.api.AbstractTable (class com.sun.tools.javac.code.Symbol$ClassSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/AbstractTable-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 91,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull private static Map<TableColumn, Integer> getHeaderDescription(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractReportPage<?> reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableCellRange tableRange, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int headersRowCount) {     Map<TableColumn, Integer> columnIndices = new HashMap<>();     ReportPageRow[] headerRows = new ReportPageRow[headersRowCount];     for (int i = 0; i < headersRowCount; i++) {         headerRows[i] = reportPage.getRow(tableRange.getFirstRow() + 1 + i);     }     TableColumn[] columns = Arrays.stream(headerDescription.getEnumConstants()).map(TableColumnDescription::getColumn).toArray(TableColumn[]::new);     for (TableColumn column : columns) {         columnIndices.put(column, column.getColumnIndex(headerRows));     }     return Collections.unmodifiableMap(columnIndices); };  elt=<T>getHeaderDescription(org.spacious_team.table_wrapper.api.AbstractReportPage<?>,org.spacious_team.table_wrapper.api.TableCellRange,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/AbstractTableCell-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 25,col 1): annotateTypeParameters: mismatched sizes:  typeParameters (size 1)=[T];  typeArguments (size 2)=[T extends Object, D extends CellDataAccessObject<T extends Object, ? extends Object>];  decl=@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker") public abstract class AbstractTableCell<T> implements TableCell {      private final T cell;      private final CellDataAccessObject<T, ?> dao;      @org.checkerframework.dataflow.qual.Pure     public Object getValue(AbstractTableCell<T> this) {         return dao.getValue(cell);     }      @org.checkerframework.dataflow.qual.Pure     public int getIntValue(AbstractTableCell<T> this) {         return dao.getIntValue(cell);     }      @org.checkerframework.dataflow.qual.Pure     public long getLongValue(AbstractTableCell<T> this) {         return dao.getLongValue(cell);     }      @org.checkerframework.dataflow.qual.Pure     public Double getDoubleValue(AbstractTableCell<T> this) {         return dao.getDoubleValue(cell);     }      @org.checkerframework.dataflow.qual.Pure     public BigDecimal getBigDecimalValue(AbstractTableCell<T> this) {         return dao.getBigDecimalValue(cell);     }      @org.checkerframework.dataflow.qual.Pure     public String getStringValue(AbstractTableCell<T> this) {         return dao.getStringValue(cell);     }      @org.checkerframework.dataflow.qual.Pure     public Instant getInstantValue(AbstractTableCell<T> this) {         return dao.getInstantValue(cell);     }      @org.checkerframework.dataflow.qual.Impure     public LocalDateTime getLocalDateTimeValue(AbstractTableCell<T> this) {         return dao.getLocalDateTimeValue(cell);     }      @org.checkerframework.dataflow.qual.Pure     protected T getCell() {         return this.cell;     }      @org.checkerframework.dataflow.qual.Pure     protected CellDataAccessObject<T, ?> getDao() {         return this.dao;     }      @org.checkerframework.dataflow.qual.SideEffectFree     protected AbstractTableCell(final T cell, final CellDataAccessObject<T, ?> dao) {         this.cell = cell;         this.dao = dao;     } };  elt=org.spacious_team.table_wrapper.api.AbstractTableCell (class com.sun.tools.javac.code.Symbol$ClassSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/AbstractTableCell-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 77,col 5): Method getDao() not found in type org.spacious_team.table_wrapper.api.AbstractTableCell
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/AbstractTableCell-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 82,col 5): Constructor <init>(T,CellDataAccessObject) not found in type org.spacious_team.table_wrapper.api.AbstractTableCell
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/AbstractTableCell-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 33,col 30): Mismatch in type argument size between AbstractTableCell<T> (1) and AbstractTableCell<T extends Object, D extends CellDataAccessObject<T extends Object, ? extends Object>> (2)
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/AbstractTableCell-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 25,col 1): annotateTypeParameters: mismatched sizes:  typeParameters (size 1)=[T];  typeArguments (size 2)=[T extends Object, D extends CellDataAccessObject<T extends Object, ? extends Object>];  decl=@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker") public abstract class AbstractTableCell<T> implements TableCell {      private final T cell;      private final CellDataAccessObject<T, ?> dao;      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public Object getValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTableCell<T> this) {         return dao.getValue(cell);     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public int getIntValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTableCell<T> this) {         return dao.getIntValue(cell);     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public long getLongValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTableCell<T> this) {         return dao.getLongValue(cell);     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public Double getDoubleValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTableCell<T> this) {         return dao.getDoubleValue(cell);     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public BigDecimal getBigDecimalValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTableCell<T> this) {         return dao.getBigDecimalValue(cell);     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public String getStringValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTableCell<T> this) {         return dao.getStringValue(cell);     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public Instant getInstantValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTableCell<T> this) {         return dao.getInstantValue(cell);     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public LocalDateTime getLocalDateTimeValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractTableCell<T> this) {         return dao.getLocalDateTimeValue(cell);     }      @org.checkerframework.dataflow.qual.Pure     protected T getCell() {         return this.cell;     }      @org.checkerframework.dataflow.qual.Pure     protected CellDataAccessObject<T, ?> getDao() {         return this.dao;     }      @org.checkerframework.dataflow.qual.SideEffectFree     protected AbstractTableCell(final T cell, final CellDataAccessObject<T, ?> dao) {         this.cell = cell;         this.dao = dao;     } };  elt=org.spacious_team.table_wrapper.api.AbstractTableCell (class com.sun.tools.javac.code.Symbol$ClassSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/CellDataAccessObject-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 34,col 13): Field defaultZoneId not found in type org.spacious_team.table_wrapper.api.CellDataAccessObject
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/CellDataAccessObject-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 36,col 14): Field spacePattern not found in type org.spacious_team.table_wrapper.api.CellDataAccessObject
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/CellDataAccessObject-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 38,col 13): Field NO_CELL_VALUE_EXCEPTION_MESSAGE not found in type org.spacious_team.table_wrapper.api.CellDataAccessObject
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/MutableTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 32,col 1): annotateTypeParameters: mismatched sizes:  typeParameters (size 1)=[T extends ReportPageRow];  typeArguments (size 2)=[C extends Object, R extends ReportPageRow];  decl=@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker") class MutableTableRow<T extends ReportPageRow> implements TableRow {      private final Table table;      private final CellDataAccessObject<?, T> dao;      private volatile T row;      @org.checkerframework.dataflow.qual.Impure     public TableCell getCell(MutableTableRow<T> this, TableColumnDescription column) {         return getCell(getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Impure     public TableCell getCell(MutableTableRow<T> this, int i) {         return row.getCell(i);     }      @org.checkerframework.dataflow.qual.Impure     public int getRowNum(MutableTableRow<T> this) {         return row.getRowNum();     }      @org.checkerframework.dataflow.qual.Impure     public int getFirstCellNum(MutableTableRow<T> this) {         return row.getFirstCellNum();     }      @org.checkerframework.dataflow.qual.Impure     public int getLastCellNum(MutableTableRow<T> this) {         return row.getLastCellNum();     }      @org.checkerframework.dataflow.qual.Impure     public boolean rowContains(MutableTableRow<T> this, Object expected) {         return row.rowContains(expected);     }      @org.checkerframework.dataflow.qual.Impure     public Iterator<TableCell> iterator(MutableTableRow<T> this) {         return row.iterator();     }      @org.checkerframework.dataflow.qual.Pure     public Object getCellValue(MutableTableRow<T> this, TableColumnDescription column) {         return dao.getValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Pure     public int getIntCellValue(MutableTableRow<T> this, TableColumnDescription column) {         return dao.getIntValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Pure     public long getLongCellValue(MutableTableRow<T> this, TableColumnDescription column) {         return dao.getLongValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Pure     public double getDoubleCellValue(MutableTableRow<T> this, TableColumnDescription column) {         return dao.getDoubleValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Pure     public BigDecimal getBigDecimalCellValue(MutableTableRow<T> this, TableColumnDescription column) {         return dao.getBigDecimalValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Pure     public String getStringCellValue(MutableTableRow<T> this, TableColumnDescription column) {         return dao.getStringValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Pure     public Instant getInstantCellValue(MutableTableRow<T> this, TableColumnDescription column) {         return dao.getInstantValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Impure     public LocalDateTime getLocalDateTimeCellValue(MutableTableRow<T> this, TableColumnDescription column) {         return dao.getLocalDateTimeValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Pure     private Integer getCellIndex(MutableTableRow<T> this, TableColumnDescription column) {         return table.getHeaderDescription().get(column.getColumn());     }      @org.checkerframework.dataflow.qual.SideEffectFree     public MutableTableRow<T> clone(MutableTableRow<T> this) {         try {             return (MutableTableRow<T>) super.clone();         } catch (CloneNotSupportedException e) {             throw new RuntimeException("Can\'t clone " + this.getClass().getName());         }     }      @org.checkerframework.dataflow.qual.SideEffectFree     public MutableTableRow(final Table table, final CellDataAccessObject<?, T> dao) {         this.table = table;         this.dao = dao;     }      @org.checkerframework.dataflow.qual.Pure     public Table getTable() {         return this.table;     }      @org.checkerframework.dataflow.qual.Pure     public CellDataAccessObject<?, T> getDao() {         return this.dao;     }      @org.checkerframework.dataflow.qual.Pure     public T getRow() {         return this.row;     }      @org.checkerframework.dataflow.qual.Pure     public boolean equals(final java.lang.Object o) {         if (o == this)             return true;         if (!(o instanceof MutableTableRow))             return false;         final MutableTableRow<?> other = (MutableTableRow<?>) o;         if (!other.canEqual((java.lang.Object) this))             return false;         final java.lang.Object this$table = this.getTable();         final java.lang.Object other$table = other.getTable();         if (this$table == null ? other$table != null : !this$table.equals(other$table))             return false;         final java.lang.Object this$dao = this.getDao();         final java.lang.Object other$dao = other.getDao();         if (this$dao == null ? other$dao != null : !this$dao.equals(other$dao))             return false;         final java.lang.Object this$row = this.getRow();         final java.lang.Object other$row = other.getRow();         if (this$row == null ? other$row != null : !this$row.equals(other$row))             return false;         return true;     }      @org.checkerframework.dataflow.qual.Pure     protected boolean canEqual(final java.lang.Object other) {         return other instanceof MutableTableRow;     }      @org.checkerframework.dataflow.qual.Pure     public int hashCode() {         final int PRIME = 59;         int result = 1;         final java.lang.Object $table = this.getTable();         result = result * PRIME + ($table == null ? 43 : $table.hashCode());         final java.lang.Object $dao = this.getDao();         result = result * PRIME + ($dao == null ? 43 : $dao.hashCode());         final java.lang.Object $row = this.getRow();         result = result * PRIME + ($row == null ? 43 : $row.hashCode());         return result;     }      @org.checkerframework.dataflow.qual.Pure     public java.lang.String toString() {         return "MutableTableRow(table=" + this.getTable() + ", dao=" + this.getDao() + ", row=" + this.getRow() + ")";     }      @org.checkerframework.dataflow.qual.Impure     void setRow(final T row) {         this.row = row;     } };  elt=org.spacious_team.table_wrapper.api.MutableTableRow (class com.sun.tools.javac.code.Symbol$ClassSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/MutableTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 41,col 5): Method getCell(TableColumnDescription) not found in type org.spacious_team.table_wrapper.api.MutableTableRow
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/MutableTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 76,col 5): Method getCellValue(TableColumnDescription) not found in type org.spacious_team.table_wrapper.api.MutableTableRow
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/MutableTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 81,col 5): Method getIntCellValue(TableColumnDescription) not found in type org.spacious_team.table_wrapper.api.MutableTableRow
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/MutableTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 86,col 5): Method getLongCellValue(TableColumnDescription) not found in type org.spacious_team.table_wrapper.api.MutableTableRow
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/MutableTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 91,col 5): Method getDoubleCellValue(TableColumnDescription) not found in type org.spacious_team.table_wrapper.api.MutableTableRow
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/MutableTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 96,col 5): Method getBigDecimalCellValue(TableColumnDescription) not found in type org.spacious_team.table_wrapper.api.MutableTableRow
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/MutableTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 101,col 5): Method getStringCellValue(TableColumnDescription) not found in type org.spacious_team.table_wrapper.api.MutableTableRow
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/MutableTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 106,col 5): Method getInstantCellValue(TableColumnDescription) not found in type org.spacious_team.table_wrapper.api.MutableTableRow
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/MutableTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 111,col 5): Method getLocalDateTimeCellValue(TableColumnDescription) not found in type org.spacious_team.table_wrapper.api.MutableTableRow
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/MutableTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 116,col 5): Method getCellIndex(TableColumnDescription) not found in type org.spacious_team.table_wrapper.api.MutableTableRow
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/MutableTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 204,col 5): Package-private method setRow(T) not found in type org.spacious_team.table_wrapper.api.MutableTableRow
  If the method is not package-private, add an access specifier in the stub file and use -AstubDebug to receive a more useful error message.
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/MutableTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 47,col 32): Mismatch in type argument size between MutableTableRow<T> (1) and MutableTableRow<C extends Object, R extends ReportPageRow> (2)
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/MutableTableRow-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 32,col 1): annotateTypeParameters: mismatched sizes:  typeParameters (size 1)=[T extends ReportPageRow];  typeArguments (size 2)=[C extends Object, R extends ReportPageRow];  decl=@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker") class MutableTableRow<T extends ReportPageRow> implements TableRow {      private final Table table;      private final CellDataAccessObject<?, T> dao;      @org.checkerframework.checker.initialization.qual.FBCBottom     @org.checkerframework.checker.nullness.qual.MonotonicNonNull     private volatile T row;      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public TableCell getCell(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableColumnDescription column) {         return getCell(getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public TableCell getCell(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int i) {         return row.getCell(i);     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public int getRowNum(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this) {         return row.getRowNum();     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public int getFirstCellNum(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this) {         return row.getFirstCellNum();     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public int getLastCellNum(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this) {         return row.getLastCellNum();     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public boolean rowContains(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object expected) {         return row.rowContains(expected);     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public Iterator<TableCell> iterator(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this) {         return row.iterator();     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public Object getCellValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableColumnDescription column) {         return dao.getValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public int getIntCellValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableColumnDescription column) {         return dao.getIntValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public long getLongCellValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableColumnDescription column) {         return dao.getLongValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public double getDoubleCellValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableColumnDescription column) {         return dao.getDoubleValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public BigDecimal getBigDecimalCellValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableColumnDescription column) {         return dao.getBigDecimalValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public String getStringCellValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableColumnDescription column) {         return dao.getStringValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public Instant getInstantCellValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableColumnDescription column) {         return dao.getInstantValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Impure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public LocalDateTime getLocalDateTimeCellValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableColumnDescription column) {         return dao.getLocalDateTimeValue(row, getCellIndex(column));     }      @org.checkerframework.dataflow.qual.Pure     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.Nullable     private Integer getCellIndex(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableColumnDescription column) {         return table.getHeaderDescription().get(column.getColumn());     }      @org.checkerframework.dataflow.qual.SideEffectFree     @org.checkerframework.checker.initialization.qual.Initialized     @org.checkerframework.checker.nullness.qual.NonNull     public MutableTableRow<T> clone(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableTableRow<T> this) {         try {             return (MutableTableRow<T>) super.clone();         } catch (CloneNotSupportedException e) {             throw new RuntimeException("Can\'t clone " + this.getClass().getName());         }     }      @org.checkerframework.dataflow.qual.SideEffectFree     public MutableTableRow(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull final Table table, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull final CellDataAccessObject<?, T> dao) {         this.table = table;         this.dao = dao;     }      @org.checkerframework.dataflow.qual.Pure     public Table getTable() {         return this.table;     }      @org.checkerframework.dataflow.qual.Pure     public CellDataAccessObject<?, T> getDao() {         return this.dao;     }      @org.checkerframework.dataflow.qual.Pure     public T getRow() {         return this.row;     }      @org.checkerframework.dataflow.qual.Pure     public boolean equals(final java.lang.Object o) {         if (o == this)             return true;         if (!(o instanceof MutableTableRow))             return false;         final MutableTableRow<?> other = (MutableTableRow<?>) o;         if (!other.canEqual((java.lang.Object) this))             return false;         final java.lang.Object this$table = this.getTable();         final java.lang.Object other$table = other.getTable();         if (this$table == null ? other$table != null : !this$table.equals(other$table))             return false;         final java.lang.Object this$dao = this.getDao();         final java.lang.Object other$dao = other.getDao();         if (this$dao == null ? other$dao != null : !this$dao.equals(other$dao))             return false;         final java.lang.Object this$row = this.getRow();         final java.lang.Object other$row = other.getRow();         if (this$row == null ? other$row != null : !this$row.equals(other$row))             return false;         return true;     }      @org.checkerframework.dataflow.qual.Pure     protected boolean canEqual(final java.lang.Object other) {         return other instanceof MutableTableRow;     }      @org.checkerframework.dataflow.qual.Pure     public int hashCode() {         final int PRIME = 59;         int result = 1;         final java.lang.Object $table = this.getTable();         result = result * PRIME + ($table == null ? 43 : $table.hashCode());         final java.lang.Object $dao = this.getDao();         result = result * PRIME + ($dao == null ? 43 : $dao.hashCode());         final java.lang.Object $row = this.getRow();         result = result * PRIME + ($row == null ? 43 : $row.hashCode());         return result;     }      @org.checkerframework.dataflow.qual.Pure     public java.lang.String toString() {         return "MutableTableRow(table=" + this.getTable() + ", dao=" + this.getDao() + ", row=" + this.getRow() + ")";     }      @org.checkerframework.dataflow.qual.Impure     void setRow(final T row) {         this.row = row;     } };  elt=org.spacious_team.table_wrapper.api.MutableTableRow (class com.sun.tools.javac.code.Symbol$ClassSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/OptionalTableColumn-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 28,col 5): Constructor <init>() not found in type org.spacious_team.table_wrapper.api.OptionalTableColumn
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/RelativePositionTableColumn-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 24,col 31): Field relatedTableColumn not found in type org.spacious_team.table_wrapper.api.RelativePositionTableColumn
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/RelativePositionTableColumn-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 26,col 23): Field relatedOffset not found in type org.spacious_team.table_wrapper.api.RelativePositionTableColumn
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 300,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(String tableName, String tableFooterString, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).create(this, tableName, tableFooterString, headerDescription); };  elt=<T>create(java.lang.String,java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 305,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(String tableName, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).create(this, tableName, headerDescription); };  elt=<T>create(java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 310,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(String tableName, String tableFooterString, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).create(this, tableName, tableFooterString, headerDescription, headersRowCount); };  elt=<T>create(java.lang.String,java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 315,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(String tableName, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).create(this, tableName, headerDescription, headersRowCount); };  elt=<T>create(java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 320,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(Predicate<Object> tableNameFinder, Predicate<Object> tableFooterFinder, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).create(this, tableNameFinder, tableFooterFinder, headerDescription); };  elt=<T>create(java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 325,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(Predicate<Object> tableNameFinder, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).create(this, tableNameFinder, headerDescription); };  elt=<T>create(java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 330,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(Predicate<Object> tableNameFinder, Predicate<Object> tableFooterFinder, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).create(this, tableNameFinder, tableFooterFinder, headerDescription, headersRowCount); };  elt=<T>create(java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 335,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(Predicate<Object> tableNameFinder, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).create(this, tableNameFinder, headerDescription, headersRowCount); };  elt=<T>create(java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 340,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(String firstLineText, String lastRowString, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).createNameless(this, firstLineText, lastRowString, headerDescription); };  elt=<T>createNameless(java.lang.String,java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 345,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(String firstLineText, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).createNameless(this, firstLineText, headerDescription); };  elt=<T>createNameless(java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 350,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(String providedTableName, String firstLineText, String lastRowString, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).createNameless(this, providedTableName, firstLineText, lastRowString, headerDescription, headersRowCount); };  elt=<T>createNameless(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 355,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(String providedTableName, String firstLineText, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).createNameless(this, providedTableName, firstLineText, headerDescription, headersRowCount); };  elt=<T>createNameless(java.lang.String,java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 360,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(Predicate<Object> firstLineFinder, Predicate<Object> lastRowFinder, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).createNameless(this, firstLineFinder, lastRowFinder, headerDescription); };  elt=<T>createNameless(java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 365,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(Predicate<Object> firstLineFinder, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).createNameless(this, firstLineFinder, headerDescription); };  elt=<T>createNameless(java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 370,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(String providedTableName, Predicate<Object> firstLineFinder, Predicate<Object> lastRowFinder, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).createNameless(this, providedTableName, firstLineFinder, lastRowFinder, headerDescription, headersRowCount); };  elt=<T>createNameless(java.lang.String,java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 375,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(String providedTableName, Predicate<Object> firstLineFinder, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).createNameless(this, providedTableName, firstLineFinder, headerDescription, headersRowCount); };  elt=<T>createNameless(java.lang.String,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 300,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(String tableName, String tableFooterString, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).create(this, tableName, tableFooterString, headerDescription); };  elt=<T>create(java.lang.String,java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 305,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(String tableName, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).create(this, tableName, headerDescription); };  elt=<T>create(java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 310,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(String tableName, String tableFooterString, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).create(this, tableName, tableFooterString, headerDescription, headersRowCount); };  elt=<T>create(java.lang.String,java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 315,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(String tableName, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).create(this, tableName, headerDescription, headersRowCount); };  elt=<T>create(java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 320,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(Predicate<Object> tableNameFinder, Predicate<Object> tableFooterFinder, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).create(this, tableNameFinder, tableFooterFinder, headerDescription); };  elt=<T>create(java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 325,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(Predicate<Object> tableNameFinder, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).create(this, tableNameFinder, headerDescription); };  elt=<T>create(java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 330,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(Predicate<Object> tableNameFinder, Predicate<Object> tableFooterFinder, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).create(this, tableNameFinder, tableFooterFinder, headerDescription, headersRowCount); };  elt=<T>create(java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 335,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(Predicate<Object> tableNameFinder, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).create(this, tableNameFinder, headerDescription, headersRowCount); };  elt=<T>create(java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 340,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table createNameless(String firstLineText, String lastRowString, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).createNameless(this, firstLineText, lastRowString, headerDescription); };  elt=<T>createNameless(java.lang.String,java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 345,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table createNameless(String firstLineText, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).createNameless(this, firstLineText, headerDescription); };  elt=<T>createNameless(java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 350,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table createNameless(String providedTableName, String firstLineText, String lastRowString, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).createNameless(this, providedTableName, firstLineText, lastRowString, headerDescription, headersRowCount); };  elt=<T>createNameless(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 355,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table createNameless(String providedTableName, String firstLineText, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).createNameless(this, providedTableName, firstLineText, headerDescription, headersRowCount); };  elt=<T>createNameless(java.lang.String,java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 360,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table createNameless(Predicate<Object> firstLineFinder, Predicate<Object> lastRowFinder, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).createNameless(this, firstLineFinder, lastRowFinder, headerDescription); };  elt=<T>createNameless(java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 365,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table createNameless(Predicate<Object> firstLineFinder, Class<? extends TableColumnDescription> headerDescription) {     return TableFactoryRegistry.get(this).createNameless(this, firstLineFinder, headerDescription); };  elt=<T>createNameless(java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 370,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table createNameless(String providedTableName, Predicate<Object> firstLineFinder, Predicate<Object> lastRowFinder, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).createNameless(this, providedTableName, firstLineFinder, lastRowFinder, headerDescription, headersRowCount); };  elt=<T>createNameless(java.lang.String,java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/ReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 375,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table createNameless(String providedTableName, Predicate<Object> firstLineFinder, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return TableFactoryRegistry.get(this).createNameless(this, providedTableName, firstLineFinder, headerDescription, headersRowCount); };  elt=<T>createNameless(java.lang.String,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableCell-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 117,col 5): Package-private method getDoubleValue(double) not found in type org.spacious_team.table_wrapper.api.TableCell
  If the method is not package-private, add an access specifier in the stub file and use -AstubDebug to receive a more useful error message.
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableColumn-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 23,col 11): Field NOCOLUMN_INDEX not found in type org.spacious_team.table_wrapper.api.TableColumn
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableColumnDescription-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 20,col 1): Type not found: org.spacious_team.table_wrapper.api.TableColumnDescription
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableColumnImpl-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 23,col 1): Type not found: org.spacious_team.table_wrapper.api.TableColumnImpl
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 35,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(TableFactory this, ReportPage reportPage, String tableName, String lastRowString, Class<? extends TableColumnDescription> headerDescription) {     return create(reportPage, tableName, lastRowString, headerDescription, 1); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 45,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(TableFactory this, ReportPage reportPage, String tableName, Class<? extends TableColumnDescription> headerDescription) {     return create(reportPage, tableName, headerDescription, 1); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 57,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(TableFactory this, ReportPage reportPage, String tableName, String lastRowString, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return create(reportPage, tableName, reportPage.getTableCellRange(tableName, headersRowCount, lastRowString), headerDescription, headersRowCount); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 67,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(TableFactory this, ReportPage reportPage, String tableName, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return create(reportPage, tableName, reportPage.getTableCellRange(tableName, headersRowCount), headerDescription, headersRowCount); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 78,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(TableFactory this, ReportPage reportPage, Predicate<Object> tableNameFinder, Predicate<Object> lastRowFinder, Class<? extends TableColumnDescription> headerDescription) {     return create(reportPage, tableNameFinder, lastRowFinder, headerDescription, 1); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 89,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(TableFactory this, ReportPage reportPage, Predicate<Object> tableNameFinder, Class<? extends TableColumnDescription> headerDescription) {     return create(reportPage, tableNameFinder, headerDescription, 1); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 100,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(TableFactory this, ReportPage reportPage, Predicate<Object> tableNameFinder, Predicate<Object> lastRowFinder, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     String tableName = "<not found>";     TableCellRange range = reportPage.getTableCellRange(tableNameFinder, headersRowCount, lastRowFinder);     if (!range.equals(TableCellRange.EMPTY_RANGE)) {         TableCellAddress tableNameCell = reportPage.find(range.getFirstRow(), range.getFirstRow() + 1, tableNameFinder);         tableName = tableNameCell.equals(TableCellAddress.NOT_FOUND) ? "<not found>" : reportPage.getCell(tableNameCell).getStringValue();     }     return create(reportPage, tableName, range, headerDescription, headersRowCount); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 118,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table create(TableFactory this, ReportPage reportPage, Predicate<Object> tableNameFinder, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     String tableName = "<not found>";     TableCellRange range = reportPage.getTableCellRange(tableNameFinder, headersRowCount);     if (!range.equals(TableCellRange.EMPTY_RANGE)) {         TableCellAddress tableNameCell = reportPage.find(range.getFirstRow(), range.getFirstRow() + 1, tableNameFinder);         tableName = tableNameCell.equals(TableCellAddress.NOT_FOUND) ? "<not found>" : reportPage.getCell(tableNameCell).getStringValue();     }     return create(reportPage, tableName, range, headerDescription, headersRowCount); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 137,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(TableFactory this, ReportPage reportPage, String firstRowString, String lastRowString, Class<? extends TableColumnDescription> headerDescription) {     return createNameless(reportPage, "undefined", firstRowString, lastRowString, headerDescription, 1); };  elt=<T>createNameless(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 147,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(TableFactory this, ReportPage reportPage, String firstRowString, Class<? extends TableColumnDescription> headerDescription) {     return createNameless(reportPage, "undefined", firstRowString, headerDescription, 1); };  elt=<T>createNameless(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 160,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(TableFactory this, ReportPage reportPage, String providedTableName, String firstRowString, String lastRowString, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return create(reportPage, providedTableName, reportPage.getTableCellRange(firstRowString, headersRowCount, lastRowString).addRowsToTop(1), headerDescription, headersRowCount); };  elt=<T>createNameless(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 172,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(TableFactory this, ReportPage reportPage, String providedTableName, String firstRowString, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return create(reportPage, providedTableName, reportPage.getTableCellRange(firstRowString, headersRowCount).addRowsToTop(1), headerDescription, headersRowCount); };  elt=<T>createNameless(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 184,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(TableFactory this, ReportPage reportPage, Predicate<Object> firstRowFinder, Predicate<Object> lastRowFinder, Class<? extends TableColumnDescription> headerDescription) {     return createNameless(reportPage, "undefined", firstRowFinder, lastRowFinder, headerDescription, 1); };  elt=<T>createNameless(org.spacious_team.table_wrapper.api.ReportPage,java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 195,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(TableFactory this, ReportPage reportPage, Predicate<Object> firstRowFinder, Class<? extends TableColumnDescription> headerDescription) {     return createNameless(reportPage, "undefined", firstRowFinder, headerDescription, 1); };  elt=<T>createNameless(org.spacious_team.table_wrapper.api.ReportPage,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 207,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(TableFactory this, ReportPage reportPage, String providedTableName, Predicate<Object> firstRowFinder, Predicate<Object> lastRowFinder, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return create(reportPage, providedTableName, reportPage.getTableCellRange(firstRowFinder, headersRowCount, lastRowFinder).addRowsToTop(1), headerDescription, headersRowCount); };  elt=<T>createNameless(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 220,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure default Table createNameless(TableFactory this, ReportPage reportPage, String providedTableName, Predicate<Object> firstRowFinder, Class<? extends TableColumnDescription> headerDescription, int headersRowCount) {     return create(reportPage, providedTableName, reportPage.getTableCellRange(firstRowFinder, headersRowCount).addRowsToTop(1), headerDescription, headersRowCount); };  elt=<T>createNameless(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava:(line 226,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Pure Table create(TableFactory this, ReportPage reportPage, String tableName, TableCellRange tableRange, Class<? extends TableColumnDescription> headerDescription, int headersRowCount);;  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,org.spacious_team.table_wrapper.api.TableCellRange,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 35,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPage reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String tableName, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String lastRowString, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription) {     return create(reportPage, tableName, lastRowString, headerDescription, 1); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 45,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPage reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String tableName, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription) {     return create(reportPage, tableName, headerDescription, 1); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 57,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPage reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String tableName, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String lastRowString, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int headersRowCount) {     return create(reportPage, tableName, reportPage.getTableCellRange(tableName, headersRowCount, lastRowString), headerDescription, headersRowCount); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 67,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPage reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String tableName, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int headersRowCount) {     return create(reportPage, tableName, reportPage.getTableCellRange(tableName, headersRowCount), headerDescription, headersRowCount); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 78,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPage reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<Object> tableNameFinder, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<Object> lastRowFinder, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription) {     return create(reportPage, tableNameFinder, lastRowFinder, headerDescription, 1); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 89,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPage reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<Object> tableNameFinder, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription) {     return create(reportPage, tableNameFinder, headerDescription, 1); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 100,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPage reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<Object> tableNameFinder, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<Object> lastRowFinder, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int headersRowCount) {     String tableName = "<not found>";     TableCellRange range = reportPage.getTableCellRange(tableNameFinder, headersRowCount, lastRowFinder);     if (!range.equals(TableCellRange.EMPTY_RANGE)) {         TableCellAddress tableNameCell = reportPage.find(range.getFirstRow(), range.getFirstRow() + 1, tableNameFinder);         tableName = tableNameCell.equals(TableCellAddress.NOT_FOUND) ? "<not found>" : reportPage.getCell(tableNameCell).getStringValue();     }     return create(reportPage, tableName, range, headerDescription, headersRowCount); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 118,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table create(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPage reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<Object> tableNameFinder, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int headersRowCount) {     String tableName = "<not found>";     TableCellRange range = reportPage.getTableCellRange(tableNameFinder, headersRowCount);     if (!range.equals(TableCellRange.EMPTY_RANGE)) {         TableCellAddress tableNameCell = reportPage.find(range.getFirstRow(), range.getFirstRow() + 1, tableNameFinder);         tableName = tableNameCell.equals(TableCellAddress.NOT_FOUND) ? "<not found>" : reportPage.getCell(tableNameCell).getStringValue();     }     return create(reportPage, tableName, range, headerDescription, headersRowCount); };  elt=<T>create(org.spacious_team.table_wrapper.api.ReportPage,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 137,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table createNameless(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPage reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String firstRowString, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String lastRowString, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription) {     return createNameless(reportPage, "undefined", firstRowString, lastRowString, headerDescription, 1); };  elt=<T>createNameless(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 147,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table createNameless(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPage reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String firstRowString, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription) {     return createNameless(reportPage, "undefined", firstRowString, headerDescription, 1); };  elt=<T>createNameless(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 160,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table createNameless(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPage reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String providedTableName, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String firstRowString, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String lastRowString, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int headersRowCount) {     return create(reportPage, providedTableName, reportPage.getTableCellRange(firstRowString, headersRowCount, lastRowString).addRowsToTop(1), headerDescription, headersRowCount); };  elt=<T>createNameless(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 172,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table createNameless(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPage reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String providedTableName, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String firstRowString, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int headersRowCount) {     return create(reportPage, providedTableName, reportPage.getTableCellRange(firstRowString, headersRowCount).addRowsToTop(1), headerDescription, headersRowCount); };  elt=<T>createNameless(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.lang.String,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 184,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table createNameless(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPage reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<Object> firstRowFinder, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<Object> lastRowFinder, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription) {     return createNameless(reportPage, "undefined", firstRowFinder, lastRowFinder, headerDescription, 1); };  elt=<T>createNameless(org.spacious_team.table_wrapper.api.ReportPage,java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 195,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table createNameless(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPage reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<Object> firstRowFinder, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription) {     return createNameless(reportPage, "undefined", firstRowFinder, headerDescription, 1); };  elt=<T>createNameless(org.spacious_team.table_wrapper.api.ReportPage,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
warning: /Users/erfanarvan/Desktop/comparisonPaper/wpi-njr-debug/wpi/../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/api/TableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava:(line 207,col 5): annotateTypeParameters: mismatched sizes:  typeParameters (size 0)=[];  typeArguments (size 1)=[T extends Enum<T extends Enum<T> & TableHeaderColumn> & TableHeaderColumn];  decl=@org.checkerframework.dataflow.qual.Impure @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull default Table createNameless(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPage reportPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String providedTableName, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<Object> firstRowFinder, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<Object> lastRowFinder, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<? extends TableColumnDescription> headerDescription, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int headersRowCount) {     return create(reportPage, providedTableName, reportPage.getTableCellRange(firstRowFinder, headersRowCount, lastRowFinder).addRowsToTop(1), headerDescription, headersRowCount); };  elt=<T>createNameless(org.spacious_team.table_wrapper.api.ReportPage,java.lang.String,java.util.function.Predicate<java.lang.Object>,java.util.function.Predicate<java.lang.Object>,java.lang.Class<T>,int) (class com.sun.tools.javac.code.Symbol$MethodSymbol).; for more details, run with -AstubDebug
100 warnings
+ rm -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classes
+ mkdir -p ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ mkdir -p build/whole-program-inference
++ diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out build/whole-program-inference
++ true
+ DIFF_RESULT='Only in ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper: api
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
35c35
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
58c58
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.NullnessChecker.ajava
35,36c35,36
<     @org.checkerframework.dataflow.qual.Impure
<     public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String getCell(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvCellDataAccessObject this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow row, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Integer cellIndex) {
---
>     @org.checkerframework.dataflow.qual.Pure
>     public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String getCell(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvCellDataAccessObject this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable CsvTableRow row, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Integer cellIndex) {
58c58
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
104c104
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava
104c104
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
38c38
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.SideEffectFree
48c48
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
53c53
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
76c76
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.NullnessChecker.ajava
38c38
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.SideEffectFree
48c48
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
53c53
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
76c76
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableCell-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableCell-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
61c61
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
66c66
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
91c91
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableCell-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableCell-org.checkerframework.checker.nullness.NullnessChecker.ajava
61c61
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
66c66
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
91c91
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
30c30
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.SideEffectFree
35c35
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava
30c30
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.SideEffectFree
35c35
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava
64c64
<     static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<String> equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object expected) {
---
>     static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<String> equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object expected) {
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
102c102
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
107c107
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
128c128
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.NullnessChecker.ajava
79c79
<     public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean rowContains(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object value) {
---
>     public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean rowContains(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object value) {
102c102
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
107c107
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
128c128
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure'
+ [[ 1 == 1 ]]
++ realpath iteration2.diff
realpath: iteration2.diff: No such file or directory
+ echo 'putting the diff for iteration 2 into '
putting the diff for iteration 2 into 
+ echo Only in ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper: api diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.KeyForSubchecker.ajava 35c35 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure 58c58 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.NullnessChecker.ajava 35,36c35,36 '<' @org.checkerframework.dataflow.qual.Impure '<' public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String 'getCell(@org.checkerframework.checker.initialization.qual.Initialized' @org.checkerframework.checker.nullness.qual.NonNull CsvCellDataAccessObject this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow row, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Integer 'cellIndex)' '{' --- '>' @org.checkerframework.dataflow.qual.Pure '>' public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String 'getCell(@org.checkerframework.checker.initialization.qual.Initialized' @org.checkerframework.checker.nullness.qual.NonNull CsvCellDataAccessObject this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable CsvTableRow row, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Integer 'cellIndex)' '{' 58c58 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava 104c104 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava 104c104 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava 38c38 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.SideEffectFree 48c48 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure 53c53 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure 76c76 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.NullnessChecker.ajava 38c38 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.SideEffectFree 48c48 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure 53c53 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure 76c76 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableCell-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableCell-org.checkerframework.checker.nullness.KeyForSubchecker.ajava 61c61 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure 66c66 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure 91c91 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableCell-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableCell-org.checkerframework.checker.nullness.NullnessChecker.ajava 61c61 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure 66c66 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure 91c91 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava 30c30 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.SideEffectFree 35c35 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava 30c30 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.SideEffectFree 35c35 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava 64c64 '<' static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull 'Predicate<String>' 'equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized' @org.checkerframework.checker.nullness.qual.NonNull Object 'expected)' '{' --- '>' static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull 'Predicate<String>' 'equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized' @org.checkerframework.checker.nullness.qual.Nullable Object 'expected)' '{' diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava 102c102 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure 107c107 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure 128c128 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.NullnessChecker.ajava 79c79 '<' public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean 'rowContains(@org.checkerframework.checker.initialization.qual.Initialized' @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object 'value)' '{' --- '>' public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean 'rowContains(@org.checkerframework.checker.initialization.qual.Initialized' @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object 'value)' '{' 102c102 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure 107c107 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure 128c128 '<' @org.checkerframework.dataflow.qual.Impure --- '>' @org.checkerframework.dataflow.qual.Pure
+ [[ Only in ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper: api
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
35c35
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
58c58
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.NullnessChecker.ajava
35,36c35,36
<     @org.checkerframework.dataflow.qual.Impure
<     public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String getCell(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvCellDataAccessObject this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow row, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Integer cellIndex) {
---
>     @org.checkerframework.dataflow.qual.Pure
>     public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String getCell(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvCellDataAccessObject this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable CsvTableRow row, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Integer cellIndex) {
58c58
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvReportPage-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
104c104
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvReportPage-org.checkerframework.checker.nullness.NullnessChecker.ajava
104c104
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
38c38
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.SideEffectFree
48c48
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
53c53
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
76c76
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.NullnessChecker.ajava
38c38
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.SideEffectFree
48c48
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
53c53
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
76c76
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableCell-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableCell-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
61c61
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
66c66
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
91c91
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableCell-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableCell-org.checkerframework.checker.nullness.NullnessChecker.ajava
61c61
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
66c66
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
91c91
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
30c30
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.SideEffectFree
35c35
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava
30c30
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.SideEffectFree
35c35
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava
64c64
<     static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<String> equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object expected) {
---
>     static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<String> equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object expected) {
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
102c102
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
107c107
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
128c128
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.NullnessChecker.ajava
79c79
<     public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean rowContains(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object value) {
---
>     public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean rowContains(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object value) {
102c102
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
107c107
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure
128c128
<     @org.checkerframework.dataflow.qual.Impure
---
>     @org.checkerframework.dataflow.qual.Pure != '' ]]
+ rm -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ mv build/whole-program-inference ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ mkdir -p ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-iterations/iteration2
+ cp -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-iterations/iteration2
+ echo 'ending iteration 2, time taken: 3 seconds'
ending iteration 2, time taken: 3 seconds
+ echo

+ (( count++ ))
+ '[' 3 -eq 11 ']'
+ :
+ [[ 1 == 1 ]]
+ SECONDS=0
+ echo 'entering iteration 3'
entering iteration 3
+ ../scripts/tools/checker-framework-3.34.0/checker/bin/javac -processor org.checkerframework.checker.nullness.NullnessChecker -AassumePure -Adetailedmsgtext -Aajava=../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out -Ainfer=ajava -Awarns -AshowPrefixInWarningMessages -J-Xmx32G -Xmaxerrs 10000 -g -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classes -cp ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath @../dataset/post_wpi_with_s_table-wrapper-csv-impl/cf_srcs.txt
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvReportPage.java:100: warning: (override.param) $$ 7 $$ cellValuePredicate $$ @Initialized @NonNull Predicate<@Initialized @NonNull Object> $$ @Initialized @NonNull Predicate<@Initialized @Nullable Object> $$ @Initialized @NonNull CsvReportPage $$ @Initialized @NonNull TableCellAddress find(@Initialized @NonNull CsvReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @NonNull Object> p4) $$ @Initialized @NonNull ReportPage $$ @Initialized @NonNull TableCellAddress find(@Initialized @NonNull ReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @Nullable Object> p4) $$ ( 3813, 3850 ) $$ Incompatible parameter type for cellValuePredicate.
                                 Predicate< Object> cellValuePredicate) {
                                                    ^
  found   : @Initialized @NonNull Predicate<@Initialized @NonNull Object>
  required: @Initialized @NonNull Predicate<@Initialized @Nullable Object>
  Consequence: method in @Initialized @NonNull CsvReportPage
    @Initialized @NonNull TableCellAddress find(@Initialized @NonNull CsvReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @NonNull Object> p4)
  cannot override method in @Initialized @NonNull ReportPage
    @Initialized @NonNull TableCellAddress find(@Initialized @NonNull ReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @Nullable Object> p4)
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableRow.java:74: warning: (override.param) $$ 7 $$ value $$ @Initialized @NonNull Object $$ @Initialized @Nullable Object $$ @Initialized @NonNull CsvTableRow $$ @Initialized @NonNull boolean rowContains(@Initialized @NonNull CsvTableRow this, @Initialized @NonNull Object p0) $$ @Initialized @NonNull ReportPageRow $$ @Initialized @NonNull boolean rowContains(@Initialized @NonNull ReportPageRow this, @Initialized @Nullable Object p0) $$ ( 2366, 2378 ) $$ Incompatible parameter type for value.
    public boolean rowContains( Object value) {
                                       ^
  found   : @Initialized @NonNull Object
  required: @Initialized @Nullable Object
  Consequence: method in @Initialized @NonNull CsvTableRow
    @Initialized @NonNull boolean rowContains(@Initialized @NonNull CsvTableRow this, @Initialized @NonNull Object p0)
  cannot override method in @Initialized @NonNull ReportPageRow
    @Initialized @NonNull boolean rowContains(@Initialized @NonNull ReportPageRow this, @Initialized @Nullable Object p0)
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableRow.java:90: warning: (return) $$ 2 $$ @Initialized @Nullable TableCell $$ @Initialized @NonNull TableCell $$ ( 2887, 2907 ) $$ incompatible types in return.
                    return getCell(cellIndex++);
                                  ^
  type of expression: @Initialized @Nullable TableCell
  method return type: @Initialized @NonNull TableCell
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTable.java:36: warning: (purity.not.sideeffectfree.call) $$ 1 $$ super $$ ( 1827, 1884 ) $$ call to side-effecting super not allowed in side-effect-free method
        super(table, appendDataRowsToTop, appendDataRowsToBottom);
             ^
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableCell.java:36: warning: (assignment) $$ 2 $$ @Initialized @Nullable String $$ @UnknownInitialization @NonNull String $$ ( 1528, 1558 ) $$ incompatible types in assignment.
        String cellValue = getCellValue(row, columnIndex);
                                       ^
  found   : @Initialized @Nullable String
  required: @UnknownInitialization @NonNull String
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject.java:36: warning: (dereference.of.nullable) $$ 1 $$ row $$ ( 1609, 1612 ) $$ dereference of possibly-null reference row
        return (cellIndex == null) ? null : row.getCellValue(cellIndex);
                                            ^
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableFactory.java:30: warning: (purity.not.sideeffectfree.call) $$ 1 $$ super $$ ( 1300, 1326 ) $$ call to side-effecting super not allowed in side-effect-free method
        super(CsvReportPage.class);
             ^
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableFactory.java:35: warning: (purity.not.deterministic.not.sideeffectfree.call) $$ 1 $$ cast $$ ( 1560, 1576 ) $$ call to non-deterministic side-effecting cast not allowed in deterministic side-effect-free method
        return new CsvTable(cast(reportPage), tableName, tableRange, headerDescription, headersRowCount);
                                ^
8 warnings
+ rm -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classes
+ mkdir -p ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ mkdir -p build/whole-program-inference
++ diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out build/whole-program-inference
++ true
+ DIFF_RESULT='diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.NullnessChecker.ajava
36c36
<     public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String getCell(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvCellDataAccessObject this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable CsvTableRow row, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Integer cellIndex) {
---
>     public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String getCell(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvCellDataAccessObject this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow row, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Integer cellIndex) {
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
38c38
<     @org.checkerframework.dataflow.qual.SideEffectFree
---
>     @org.checkerframework.dataflow.qual.Impure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.NullnessChecker.ajava
38c38
<     @org.checkerframework.dataflow.qual.SideEffectFree
---
>     @org.checkerframework.dataflow.qual.Impure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
30c30
<     @org.checkerframework.dataflow.qual.SideEffectFree
---
>     @org.checkerframework.dataflow.qual.Impure
35c35
<     @org.checkerframework.dataflow.qual.Pure
---
>     @org.checkerframework.dataflow.qual.Impure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava
30c30
<     @org.checkerframework.dataflow.qual.SideEffectFree
---
>     @org.checkerframework.dataflow.qual.Impure
35c35
<     @org.checkerframework.dataflow.qual.Pure
---
>     @org.checkerframework.dataflow.qual.Impure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava
64c64
<     static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<String> equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object expected) {
---
>     static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<String> equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object expected) {
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.NullnessChecker.ajava
79c79
<     public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean rowContains(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object value) {
---
>     public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean rowContains(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object value) {'
+ [[ 1 == 1 ]]
++ realpath iteration3.diff
realpath: iteration3.diff: No such file or directory
+ echo 'putting the diff for iteration 3 into '
putting the diff for iteration 3 into 
+ echo diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.NullnessChecker.ajava 36c36 '<' public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String 'getCell(@org.checkerframework.checker.initialization.qual.Initialized' @org.checkerframework.checker.nullness.qual.NonNull CsvCellDataAccessObject this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable CsvTableRow row, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Integer 'cellIndex)' '{' --- '>' public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String 'getCell(@org.checkerframework.checker.initialization.qual.Initialized' @org.checkerframework.checker.nullness.qual.NonNull CsvCellDataAccessObject this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow row, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Integer 'cellIndex)' '{' diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava 38c38 '<' @org.checkerframework.dataflow.qual.SideEffectFree --- '>' @org.checkerframework.dataflow.qual.Impure diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.NullnessChecker.ajava 38c38 '<' @org.checkerframework.dataflow.qual.SideEffectFree --- '>' @org.checkerframework.dataflow.qual.Impure diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava 30c30 '<' @org.checkerframework.dataflow.qual.SideEffectFree --- '>' @org.checkerframework.dataflow.qual.Impure 35c35 '<' @org.checkerframework.dataflow.qual.Pure --- '>' @org.checkerframework.dataflow.qual.Impure diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava 30c30 '<' @org.checkerframework.dataflow.qual.SideEffectFree --- '>' @org.checkerframework.dataflow.qual.Impure 35c35 '<' @org.checkerframework.dataflow.qual.Pure --- '>' @org.checkerframework.dataflow.qual.Impure diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava 64c64 '<' static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull 'Predicate<String>' 'equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized' @org.checkerframework.checker.nullness.qual.Nullable Object 'expected)' '{' --- '>' static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull 'Predicate<String>' 'equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized' @org.checkerframework.checker.nullness.qual.NonNull Object 'expected)' '{' diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.NullnessChecker.ajava 79c79 '<' public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean 'rowContains(@org.checkerframework.checker.initialization.qual.Initialized' @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object 'value)' '{' --- '>' public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean 'rowContains(@org.checkerframework.checker.initialization.qual.Initialized' @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object 'value)' '{'
+ [[ diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject-org.checkerframework.checker.nullness.NullnessChecker.ajava
36c36
<     public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String getCell(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvCellDataAccessObject this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable CsvTableRow row, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Integer cellIndex) {
---
>     public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String getCell(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvCellDataAccessObject this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow row, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Integer cellIndex) {
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
38c38
<     @org.checkerframework.dataflow.qual.SideEffectFree
---
>     @org.checkerframework.dataflow.qual.Impure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTable-org.checkerframework.checker.nullness.NullnessChecker.ajava
38c38
<     @org.checkerframework.dataflow.qual.SideEffectFree
---
>     @org.checkerframework.dataflow.qual.Impure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.KeyForSubchecker.ajava
30c30
<     @org.checkerframework.dataflow.qual.SideEffectFree
---
>     @org.checkerframework.dataflow.qual.Impure
35c35
<     @org.checkerframework.dataflow.qual.Pure
---
>     @org.checkerframework.dataflow.qual.Impure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableFactory-org.checkerframework.checker.nullness.NullnessChecker.ajava
30c30
<     @org.checkerframework.dataflow.qual.SideEffectFree
---
>     @org.checkerframework.dataflow.qual.Impure
35c35
<     @org.checkerframework.dataflow.qual.Pure
---
>     @org.checkerframework.dataflow.qual.Impure
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava
64c64
<     static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<String> equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object expected) {
---
>     static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<String> equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object expected) {
diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableRow-org.checkerframework.checker.nullness.NullnessChecker.ajava
79c79
<     public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean rowContains(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object value) {
---
>     public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean rowContains(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CsvTableRow this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object value) { != '' ]]
+ rm -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ mv build/whole-program-inference ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ mkdir -p ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-iterations/iteration3
+ cp -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-iterations/iteration3
+ echo 'ending iteration 3, time taken: 2 seconds'
ending iteration 3, time taken: 2 seconds
+ echo

+ (( count++ ))
+ '[' 4 -eq 11 ']'
+ :
+ [[ 1 == 1 ]]
+ SECONDS=0
+ echo 'entering iteration 4'
entering iteration 4
+ ../scripts/tools/checker-framework-3.34.0/checker/bin/javac -processor org.checkerframework.checker.nullness.NullnessChecker -AassumePure -Adetailedmsgtext -Aajava=../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out -Ainfer=ajava -Awarns -AshowPrefixInWarningMessages -J-Xmx32G -Xmaxerrs 10000 -g -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classes -cp ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath @../dataset/post_wpi_with_s_table-wrapper-csv-impl/cf_srcs.txt
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvReportPage.java:100: warning: (override.param) $$ 7 $$ cellValuePredicate $$ @Initialized @NonNull Predicate<@Initialized @NonNull Object> $$ @Initialized @NonNull Predicate<@Initialized @Nullable Object> $$ @Initialized @NonNull CsvReportPage $$ @Initialized @NonNull TableCellAddress find(@Initialized @NonNull CsvReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @NonNull Object> p4) $$ @Initialized @NonNull ReportPage $$ @Initialized @NonNull TableCellAddress find(@Initialized @NonNull ReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @Nullable Object> p4) $$ ( 3813, 3850 ) $$ Incompatible parameter type for cellValuePredicate.
                                 Predicate< Object> cellValuePredicate) {
                                                    ^
  found   : @Initialized @NonNull Predicate<@Initialized @NonNull Object>
  required: @Initialized @NonNull Predicate<@Initialized @Nullable Object>
  Consequence: method in @Initialized @NonNull CsvReportPage
    @Initialized @NonNull TableCellAddress find(@Initialized @NonNull CsvReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @NonNull Object> p4)
  cannot override method in @Initialized @NonNull ReportPage
    @Initialized @NonNull TableCellAddress find(@Initialized @NonNull ReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @Nullable Object> p4)
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableRow.java:75: warning: (argument) $$ 4 $$ expected $$ CsvTableHelper.equalsPredicate $$ @Initialized @Nullable Object $$ @Initialized @NonNull Object $$ ( 2461, 2466 ) $$ incompatible argument for parameter expected of CsvTableHelper.equalsPredicate.
        return CsvTableHelper.find(row, rowNum, 0, row.length, equalsPredicate(value)) != NOT_FOUND;
                                                                               ^
  found   : @Initialized @Nullable Object
  required: @Initialized @NonNull Object
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableRow.java:90: warning: (return) $$ 2 $$ @Initialized @Nullable TableCell $$ @Initialized @NonNull TableCell $$ ( 2887, 2907 ) $$ incompatible types in return.
                    return getCell(cellIndex++);
                                  ^
  type of expression: @Initialized @Nullable TableCell
  method return type: @Initialized @NonNull TableCell
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableCell.java:36: warning: (assignment) $$ 2 $$ @Initialized @Nullable String $$ @UnknownInitialization @NonNull String $$ ( 1528, 1558 ) $$ incompatible types in assignment.
        String cellValue = getCellValue(row, columnIndex);
                                       ^
  found   : @Initialized @Nullable String
  required: @UnknownInitialization @NonNull String
4 warnings
+ rm -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classes
+ mkdir -p ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ mkdir -p build/whole-program-inference
++ diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out build/whole-program-inference
++ true
+ DIFF_RESULT='diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava
64c64
<     static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<String> equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object expected) {
---
>     static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<String> equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object expected) {'
+ [[ 1 == 1 ]]
++ realpath iteration4.diff
realpath: iteration4.diff: No such file or directory
+ echo 'putting the diff for iteration 4 into '
putting the diff for iteration 4 into 
+ echo diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava 64c64 '<' static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull 'Predicate<String>' 'equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized' @org.checkerframework.checker.nullness.qual.NonNull Object 'expected)' '{' --- '>' static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull 'Predicate<String>' 'equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized' @org.checkerframework.checker.nullness.qual.Nullable Object 'expected)' '{'
+ [[ diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava build/whole-program-inference/org/spacious_team/table_wrapper/csv/CsvTableHelper-org.checkerframework.checker.nullness.NullnessChecker.ajava
64c64
<     static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<String> equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object expected) {
---
>     static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Predicate<String> equalsPredicate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object expected) { != '' ]]
+ rm -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ mv build/whole-program-inference ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ mkdir -p ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-iterations/iteration4
+ cp -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out/org ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-iterations/iteration4
+ echo 'ending iteration 4, time taken: 3 seconds'
ending iteration 4, time taken: 3 seconds
+ echo

+ (( count++ ))
+ '[' 5 -eq 11 ']'
+ :
+ [[ 1 == 1 ]]
+ SECONDS=0
+ echo 'entering iteration 5'
entering iteration 5
+ ../scripts/tools/checker-framework-3.34.0/checker/bin/javac -processor org.checkerframework.checker.nullness.NullnessChecker -AassumePure -Adetailedmsgtext -Aajava=../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out -Ainfer=ajava -Awarns -AshowPrefixInWarningMessages -J-Xmx32G -Xmaxerrs 10000 -g -d ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classes -cp ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classpath @../dataset/post_wpi_with_s_table-wrapper-csv-impl/cf_srcs.txt
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvReportPage.java:100: warning: (override.param) $$ 7 $$ cellValuePredicate $$ @Initialized @NonNull Predicate<@Initialized @NonNull Object> $$ @Initialized @NonNull Predicate<@Initialized @Nullable Object> $$ @Initialized @NonNull CsvReportPage $$ @Initialized @NonNull TableCellAddress find(@Initialized @NonNull CsvReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @NonNull Object> p4) $$ @Initialized @NonNull ReportPage $$ @Initialized @NonNull TableCellAddress find(@Initialized @NonNull ReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @Nullable Object> p4) $$ ( 3813, 3850 ) $$ Incompatible parameter type for cellValuePredicate.
                                 Predicate< Object> cellValuePredicate) {
                                                    ^
  found   : @Initialized @NonNull Predicate<@Initialized @NonNull Object>
  required: @Initialized @NonNull Predicate<@Initialized @Nullable Object>
  Consequence: method in @Initialized @NonNull CsvReportPage
    @Initialized @NonNull TableCellAddress find(@Initialized @NonNull CsvReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @NonNull Object> p4)
  cannot override method in @Initialized @NonNull ReportPage
    @Initialized @NonNull TableCellAddress find(@Initialized @NonNull ReportPage this, @Initialized @NonNull int p0, @Initialized @NonNull int p1, @Initialized @NonNull int p2, @Initialized @NonNull int p3, @Initialized @NonNull Predicate<@Initialized @Nullable Object> p4)
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableRow.java:90: warning: (return) $$ 2 $$ @Initialized @Nullable TableCell $$ @Initialized @NonNull TableCell $$ ( 2887, 2907 ) $$ incompatible types in return.
                    return getCell(cellIndex++);
                                  ^
  type of expression: @Initialized @Nullable TableCell
  method return type: @Initialized @NonNull TableCell
../dataset/post_wpi_with_s_table-wrapper-csv-impl/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableCell.java:36: warning: (assignment) $$ 2 $$ @Initialized @Nullable String $$ @UnknownInitialization @NonNull String $$ ( 1528, 1558 ) $$ incompatible types in assignment.
        String cellValue = getCellValue(row, columnIndex);
                                       ^
  found   : @Initialized @Nullable String
  required: @UnknownInitialization @NonNull String
3 warnings
+ rm -rf ../dataset/post_wpi_with_s_table-wrapper-csv-impl/classes
+ mkdir -p ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out
+ mkdir -p build/whole-program-inference
++ diff -r ../dataset/post_wpi_with_s_table-wrapper-csv-impl/wpi-out build/whole-program-inference
+ DIFF_RESULT=
+ [[ 1 == 1 ]]
++ realpath iteration5.diff
realpath: iteration5.diff: No such file or directory
+ echo 'putting the diff for iteration 5 into '
putting the diff for iteration 5 into 
+ echo
+ [[ '' != '' ]]
+ break
