// Generated by delombok at Tue Aug 20 14:53:27 EDT 2024
/*
 * Table Wrapper API
 * Copyright (C) 2020  Spacious Team <spacious-team@ya.ru>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package org.spacious_team.table_wrapper.api;

import java.util.Iterator;
import java.util.function.Function;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public abstract class AbstractReportPageRow implements ReportPageRow {

    protected static class ReportPageRowIterator<T> implements Iterator<TableCell> {

        private final Iterator<T> innerIterator;

        private final Function<T, TableCell> converter;

        @org.checkerframework.dataflow.qual.Pure
        public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean hasNext(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPageRowIterator<T> this) {
            return innerIterator.hasNext();
        }

        @org.checkerframework.dataflow.qual.Impure
        public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TableCell next(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPageRowIterator<T> this) {
            return converter.apply(innerIterator.next());
        }

        @org.checkerframework.dataflow.qual.SideEffectFree
        public ReportPageRowIterator(final Iterator<T> innerIterator, final Function<T, TableCell> converter) {
            this.innerIterator = innerIterator;
            this.converter = converter;
        }
    }
}
