// Generated by delombok at Tue Aug 20 14:53:27 EDT 2024
/*
 * Table Wrapper API
 * Copyright (C) 2020  Spacious Team <spacious-team@ya.ru>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package org.spacious_team.table_wrapper.api;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class RelativePositionTableColumn implements TableColumn {

    private final TableColumn relatedTableColumn;

    private final int relatedOffset;

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getColumnIndex(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull RelativePositionTableColumn this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int firstColumnForSearch, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReportPageRow@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ... headerRows) {
        return relatedTableColumn.getColumnIndex(firstColumnForSearch, headerRows) + relatedOffset;
    }

    @org.checkerframework.dataflow.qual.Pure
    public java.lang.String toString() {
        return "RelativePositionTableColumn(relatedTableColumn=" + this.relatedTableColumn + ", relatedOffset=" + this.relatedOffset + ")";
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    private RelativePositionTableColumn(final TableColumn relatedTableColumn, final int relatedOffset) {
        this.relatedTableColumn = relatedTableColumn;
        this.relatedOffset = relatedOffset;
    }

    @org.checkerframework.dataflow.qual.Pure
    public static RelativePositionTableColumn of(final TableColumn relatedTableColumn, final int relatedOffset) {
        return new RelativePositionTableColumn(relatedTableColumn, relatedOffset);
    }
}
