/*
 * Copyright 2017 Ben Manes. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.benmanes.caffeine.cache;

import static com.github.benmanes.caffeine.cache.Caffeine.requireArgument;
import static java.util.Objects.requireNonNull;
import java.lang.ref.ReferenceQueue;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;

/**
 * A hierarchical timer wheel to add, remove, and fire expiration events in amortized O(1) time. The
 * expiration events are deferred until the timer is advanced, which is performed as part of the
 * cache's maintenance cycle.
 *
 * @author ben.manes@gmail.com (Ben Manes)
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
final class TimerWheel<K, V> {

    /*
   * A timer wheel [1] stores timer events in buckets on a circular buffer. A bucket represents a
   * coarse time span, e.g. one minute, and holds a doubly-linked list of events. The wheels are
   * structured in a hierarchy (seconds, minutes, hours, days) so that events scheduled in the
   * distant future are cascaded to lower buckets when the wheels rotate. This allows for events
   * to be added, removed, and expired in O(1) time, where expiration occurs for the entire bucket,
   * and penalty of cascading is amortized by the rotations.
   *
   * [1] Hashed and Hierarchical Timing Wheels
   * http://www.cs.columbia.edu/~nahum/w6998/papers/ton97-timing-wheels.pdf
   */
    static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] BUCKETS = { 64, 64, 32, 4, 1 };

    static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] SPANS = { // 1.07s
    ceilingPowerOfTwo(TimeUnit.SECONDS.toNanos(1)), // 1.14m
    ceilingPowerOfTwo(TimeUnit.MINUTES.toNanos(1)), // 1.22h
    ceilingPowerOfTwo(TimeUnit.HOURS.toNanos(1)), // 1.63d
    ceilingPowerOfTwo(TimeUnit.DAYS.toNanos(1)), // 6.5d
    BUCKETS[3] * ceilingPowerOfTwo(TimeUnit.DAYS.toNanos(1)), // 6.5d
    BUCKETS[3] * ceilingPowerOfTwo(TimeUnit.DAYS.toNanos(1)) };

    static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] SHIFT = { Long.SIZE - Long.numberOfLeadingZeros(SPANS[0] - 1), Long.SIZE - Long.numberOfLeadingZeros(SPANS[1] - 1), Long.SIZE - Long.numberOfLeadingZeros(SPANS[2] - 1), Long.SIZE - Long.numberOfLeadingZeros(SPANS[3] - 1), Long.SIZE - Long.numberOfLeadingZeros(SPANS[4] - 1) };

    final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BoundedLocalCache<K, V> cache;

    final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] wheel;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long nanos;

    @org.checkerframework.dataflow.qual.Impure
    TimerWheel(BoundedLocalCache<K, V> cache) {
        this.cache = requireNonNull(cache);
        wheel = new Node[BUCKETS.length][1];
        for (int i = 0; i < wheel.length; i++) {
            wheel[i] = new Node[BUCKETS[i]];
            for (int j = 0; j < wheel[i].length; j++) {
                wheel[i][j] = new Sentinel<>();
            }
        }
    }

    /**
     * Advances the timer and evicts entries that have expired.
     *
     * @param currentTimeNanos the current time, in nanoseconds
     */
    @org.checkerframework.dataflow.qual.Impure
    public void advance( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long currentTimeNanos) {
        long previousTimeNanos = nanos;
        try {
            nanos = currentTimeNanos;
            for (int i = 0; i < SHIFT.length; i++) {
                long previousTicks = (previousTimeNanos >> SHIFT[i]);
                long currentTicks = (currentTimeNanos >> SHIFT[i]);
                if ((currentTicks - previousTicks) <= 0L) {
                    break;
                }
                expire(i, previousTicks, currentTicks);
            }
        } catch (Throwable t) {
            nanos = previousTimeNanos;
            throw t;
        }
    }

    /**
     * Expires entries or reschedules into the proper bucket if still active.
     *
     * @param index the wheel being operated on
     * @param previousTicks the previous number of ticks
     * @param currentTicks the current number of ticks
     */
    @org.checkerframework.dataflow.qual.Impure
    void expire( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int index,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long previousTicks,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long currentTicks) {
        Node<K, V>[] timerWheel = wheel[index];
        int start, end;
        if ((currentTicks - previousTicks) >= timerWheel.length) {
            end = timerWheel.length;
            start = 0;
        } else {
            long mask = SPANS[index] - 1;
            start = (int) (previousTicks & mask);
            end = 1 + (int) (currentTicks & mask);
        }
        int mask = timerWheel.length - 1;
        for (int i = start; i < end; i++) {
            Node<K, V> sentinel = timerWheel[(i & mask)];
            Node<K, V> prev = sentinel.getPreviousInVariableOrder();
            Node<K, V> node = sentinel.getNextInVariableOrder();
            sentinel.setPreviousInVariableOrder(sentinel);
            sentinel.setNextInVariableOrder(sentinel);
            while (node != sentinel) {
                Node<K, V> next = node.getNextInVariableOrder();
                node.setPreviousInVariableOrder(null);
                node.setNextInVariableOrder(null);
                try {
                    if (((node.getVariableTime() - nanos) > 0) || !cache.evictEntry(node, RemovalCause.EXPIRED, nanos)) {
                        Node<K, V> newSentinel = findBucket(node.getVariableTime());
                        link(newSentinel, node);
                    }
                    node = next;
                } catch (Throwable t) {
                    node.setPreviousInVariableOrder(sentinel.getPreviousInVariableOrder());
                    node.setNextInVariableOrder(next);
                    sentinel.getPreviousInVariableOrder().setNextInVariableOrder(node);
                    sentinel.setPreviousInVariableOrder(prev);
                    throw t;
                }
            }
        }
    }

    /**
     * Schedules a timer event for the node.
     *
     * @param node the entry in the cache
     */
    @org.checkerframework.dataflow.qual.Impure
    public void schedule(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> node) {
        Node<K, V> sentinel = findBucket(node.getVariableTime());
        link(sentinel, node);
    }

    /**
     * Reschedules an active timer event for the node.
     *
     * @param node the entry in the cache
     */
    @org.checkerframework.dataflow.qual.Impure
    public void reschedule(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> node) {
        if (node.getNextInVariableOrder() != null) {
            unlink(node);
            schedule(node);
        }
    }

    /**
     * Removes a timer event for this entry if present.
     *
     * @param node the entry in the cache
     */
    @org.checkerframework.dataflow.qual.Impure
    public void deschedule(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> node) {
        unlink(node);
        node.setNextInVariableOrder(null);
        node.setPreviousInVariableOrder(null);
    }

    /**
     * Determines the bucket that the timer event should be added to.
     *
     * @param time the time when the event fires
     * @return the sentinel at the head of the bucket
     */
    @org.checkerframework.dataflow.qual.Pure
    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> findBucket( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long time) {
        long duration = time - nanos;
        int length = wheel.length - 1;
        for (int i = 0; i < length; i++) {
            if (duration < SPANS[i + 1]) {
                int ticks = (int) (time >> SHIFT[i]);
                int index = ticks & (wheel[i].length - 1);
                return wheel[i][index];
            }
        }
        return wheel[length][0];
    }

    /**
     * Adds the entry at the tail of the bucket's list.
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    void link(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> sentinel, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> node) {
        node.setPreviousInVariableOrder(sentinel.getPreviousInVariableOrder());
        node.setNextInVariableOrder(sentinel);
        sentinel.getPreviousInVariableOrder().setNextInVariableOrder(node);
        sentinel.setPreviousInVariableOrder(node);
    }

    /**
     * Removes the entry from its bucket, if scheduled.
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    void unlink(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> node) {
        Node<K, V> next = node.getNextInVariableOrder();
        if (next != null) {
            Node<K, V> prev = node.getPreviousInVariableOrder();
            next.setPreviousInVariableOrder(prev);
            prev.setNextInVariableOrder(next);
        }
    }

    /**
     * Returns an unmodifiable snapshot map roughly ordered by the expiration time. The wheels are
     * evaluated in order, but the timers that fall within the bucket's range are not sorted. Beware
     * that obtaining the mappings is <em>NOT</em> a constant-time operation.
     *
     * @param ascending the direction
     * @param limit the maximum number of entries
     * @param transformer a function that unwraps the value
     * @return an unmodifiable snapshot in the desired order
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Map<K, V> snapshot( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean ascending,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int limit, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Function<V, V> transformer) {
        requireArgument(limit >= 0);
        Map<K, V> map = new LinkedHashMap<>(Math.min(limit, cache.size()));
        int startLevel = ascending ? 0 : wheel.length - 1;
        for (int i = 0; i < wheel.length; i++) {
            int indexOffset = ascending ? i : -i;
            int index = startLevel + indexOffset;
            int ticks = (int) (nanos >> SHIFT[index]);
            int bucketMask = (wheel[index].length - 1);
            int startBucket = (ticks & bucketMask) + (ascending ? 1 : 0);
            for (int j = 0; j < wheel[index].length; j++) {
                int bucketOffset = ascending ? j : -j;
                Node<K, V> sentinel = wheel[index][(startBucket + bucketOffset) & bucketMask];
                for (Node<K, V> node = traverse(ascending, sentinel); node != sentinel; node = traverse(ascending, node)) {
                    if (map.size() >= limit) {
                        break;
                    }
                    K key = node.getKey();
                    V value = transformer.apply(node.getValue());
                    if ((key != null) && (value != null) && node.isAlive()) {
                        map.put(key, value);
                    }
                }
            }
        }
        return Collections.unmodifiableMap(map);
    }

    @org.checkerframework.dataflow.qual.Pure
    static <K, V> @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> traverse( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean ascending, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> node) {
        return ascending ? node.getNextInVariableOrder() : node.getPreviousInVariableOrder();
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String toString(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TimerWheel<K, V> this) {
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < wheel.length; i++) {
            Map<Integer, List<K>> buckets = new TreeMap<>();
            for (int j = 0; j < wheel[i].length; j++) {
                List<K> events = new ArrayList<>();
                for (Node<K, V> node = wheel[i][j].getNextInVariableOrder(); node != wheel[i][j]; node = node.getNextInVariableOrder()) {
                    events.add(node.getKey());
                }
                if (!events.isEmpty()) {
                    buckets.put(j, events);
                }
            }
            builder.append("Wheel #").append(i + 1).append(": ").append(buckets).append('\n');
        }
        return builder.deleteCharAt(builder.length() - 1).toString();
    }

    /**
     * A sentinel for the doubly-linked list in the bucket.
     */
    static final class Sentinel<K, V> extends Node<K, V> {

        @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> prev;

        @org.checkerframework.checker.initialization.qual.UnknownInitialization(com.github.benmanes.caffeine.cache.Node.class) @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> next;

        @org.checkerframework.dataflow.qual.Impure
        Sentinel() {
            prev = next = this;
        }

        @org.checkerframework.dataflow.qual.Pure
        public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> getPreviousInVariableOrder(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sentinel<K, V> this) {
            return prev;
        }

        @org.checkerframework.dataflow.qual.Impure
        public void setPreviousInVariableOrder(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sentinel<K, V> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> prev) {
            this.prev = prev;
        }

        @org.checkerframework.dataflow.qual.Pure
        public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> getNextInVariableOrder(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sentinel<K, V> this) {
            return next;
        }

        @org.checkerframework.dataflow.qual.Impure
        public void setNextInVariableOrder(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sentinel<K, V> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> next) {
            this.next = next;
        }

        @org.checkerframework.dataflow.qual.Pure
        public K getKey(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sentinel<K, V> this) {
            return null;
        }

        @org.checkerframework.dataflow.qual.Pure
        public Object getKeyReference(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sentinel<K, V> this) {
            throw new UnsupportedOperationException();
        }

        @org.checkerframework.dataflow.qual.Pure
        public V getValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sentinel<K, V> this) {
            return null;
        }

        @org.checkerframework.dataflow.qual.Pure
        public Object getValueReference(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sentinel<K, V> this) {
            throw new UnsupportedOperationException();
        }

        @org.checkerframework.dataflow.qual.SideEffectFree
        public void setValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sentinel<K, V> this, V value, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReferenceQueue<V> referenceQueue) {
        }

        @org.checkerframework.dataflow.qual.Pure
        public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean containsValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sentinel<K, V> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object value) {
            return false;
        }

        @org.checkerframework.dataflow.qual.Pure
        public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isAlive(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sentinel<K, V> this) {
            return false;
        }

        @org.checkerframework.dataflow.qual.Pure
        public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isRetired(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sentinel<K, V> this) {
            return false;
        }

        @org.checkerframework.dataflow.qual.Pure
        public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isDead(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sentinel<K, V> this) {
            return false;
        }

        @org.checkerframework.dataflow.qual.SideEffectFree
        public void retire(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sentinel<K, V> this) {
        }

        @org.checkerframework.dataflow.qual.SideEffectFree
        public void die(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sentinel<K, V> this) {
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long ceilingPowerOfTwo( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long x) {
        // From Hacker's Delight, Chapter 3, Harry S. Warren Jr.
        return 1L << -Long.numberOfLeadingZeros(x - 1);
    }
}
