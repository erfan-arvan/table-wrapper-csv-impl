/*
 * Copyright 2014 Ben Manes. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.benmanes.caffeine.cache;

import java.util.Comparator;
import java.util.Deque;
import java.util.Iterator;
import java.util.NoSuchElementException;
import javax.annotation.Nullable;
import javax.annotation.concurrent.NotThreadSafe;

/**
 * A linked list extension of the {@link Deque} interface where the link pointers are tightly
 * integrated with the element. Linked deques have no capacity restrictions; they grow as necessary
 * to support usage. They are not thread-safe; in the absence of external synchronization, they do
 * not support concurrent access by multiple threads. Null elements are prohibited.
 * <p>
 * Most <tt>LinkedDeque</tt> operations run in constant time by assuming that the element parameter
 * is associated with the deque instance. Any usage that violates this assumption will result in
 * non-deterministic behavior.
 * <p>
 * An element can exist in only one instance of a deque implementation, but may exist in multiple
 * implementations. Each implementation must define unique names for accessing and modifying its
 * link pointers.
 * <p>
 * The iterators returned by this class are <em>not</em> <i>fail-fast</i>: If the deque is modified
 * at any time after the iterator is created, the iterator will be in an unknown state. Thus, in the
 * face of concurrent modification, the iterator risks arbitrary, non-deterministic behavior at an
 * undetermined time in the future.
 *
 * @author ben.manes@gmail.com (Ben Manes)
 * @param <E> the type of elements held in this collection
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
interface LinkedDeque<E> extends Deque<E> {

    /**
     * Returns if the element is at the front of the deque.
     *
     * @param e the linked element
     */
    @org.checkerframework.dataflow.qual.Pure
     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isFirst(E e);

    /**
     * Returns if the element is at the back of the deque.
     *
     * @param e the linked element
     */
    @org.checkerframework.dataflow.qual.Pure
     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isLast(E e);

    /**
     * Moves the element to the front of the deque so that it becomes the first element.
     *
     * @param e the linked element
     */
    @org.checkerframework.dataflow.qual.Impure
    void moveToFront(E e);

    /**
     * Moves the element to the back of the deque so that it becomes the last element.
     *
     * @param e the linked element
     */
    @org.checkerframework.dataflow.qual.Impure
    void moveToBack(E e);

    /**
     * Retrieves the previous element or <tt>null</tt> if either the element is unlinked or the first
     * element on the deque.
     */
    @org.checkerframework.dataflow.qual.Pure
    E getPrevious(E e);

    /**
     * Sets the previous element or <tt>null</tt> if there is no link.
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    void setPrevious(E e, E prev);

    /**
     * Retrieves the next element or <tt>null</tt> if either the element is unlinked or the last
     * element on the deque.
     */
    @org.checkerframework.dataflow.qual.Pure
    E getNext(E e);

    /**
     * Sets the next element or <tt>null</tt> if there is no link.
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    void setNext(E e, E next);

    @org.checkerframework.dataflow.qual.Impure
    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PeekingIterator<E> iterator();

    @org.checkerframework.dataflow.qual.Impure
    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PeekingIterator<E> descendingIterator();

    interface PeekingIterator<E> extends Iterator<E> {

        /**
         * Returns the next element in the iteration, without advancing the iteration.
         */
        @org.checkerframework.dataflow.qual.Impure
        E peek();

        /**
         * Returns an iterator that returns the first iteration followed by the second iteration.
         */
        @org.checkerframework.dataflow.qual.Impure
        static <E> @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PeekingIterator<E> concat(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PeekingIterator<E> first, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PeekingIterator<E> second) {
            return new PeekingIterator<E>() {

                public boolean hasNext() {
                    return first.hasNext() || second.hasNext();
                }

                public E next() {
                    if (first.hasNext()) {
                        return first.next();
                    } else if (second.hasNext()) {
                        return second.next();
                    }
                    throw new NoSuchElementException();
                }

                public E peek() {
                    return first.hasNext() ? first.peek() : second.peek();
                }
            };
        }

        /**
         * Returns an iterator that selects the greater element from the backing iterators.
         */
        @org.checkerframework.dataflow.qual.Impure
        static <E> @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PeekingIterator<E> comparing(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PeekingIterator<E> first, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PeekingIterator<E> second, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Comparator<E> comparator) {
            return new PeekingIterator<E>() {

                public boolean hasNext() {
                    return first.hasNext() || second.hasNext();
                }

                public E next() {
                    if (!first.hasNext()) {
                        return second.next();
                    } else if (!second.hasNext()) {
                        return first.next();
                    }
                    E o1 = first.peek();
                    E o2 = second.peek();
                    boolean greaterOrEqual = (comparator.compare(o1, o2) >= 0);
                    return greaterOrEqual ? first.next() : second.next();
                }

                public E peek() {
                    if (!first.hasNext()) {
                        return second.peek();
                    } else if (!second.hasNext()) {
                        return first.peek();
                    }
                    E o1 = first.peek();
                    E o2 = second.peek();
                    boolean greaterOrEqual = (comparator.compare(o1, o2) >= 0);
                    return greaterOrEqual ? first.peek() : second.peek();
                }
            };
        }
    }
}
