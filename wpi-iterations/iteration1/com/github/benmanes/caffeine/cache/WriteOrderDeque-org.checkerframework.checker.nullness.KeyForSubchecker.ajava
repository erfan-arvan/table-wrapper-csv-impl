/*
 * Copyright 2014 Ben Manes. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.benmanes.caffeine.cache;

import java.util.Deque;
import org.checkerframework.checker.nullness.qual.Nullable;
import com.github.benmanes.caffeine.cache.WriteOrderDeque.WriteOrder;

/**
 * A linked deque implementation used to represent a write-order queue.
 *
 * @author ben.manes@gmail.com (Ben Manes)
 * @param <E> the type of elements held in this collection
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
final class WriteOrderDeque<E extends WriteOrder<E>> extends AbstractLinkedDeque<E> {

    @org.checkerframework.dataflow.qual.Pure
    public   boolean contains( WriteOrderDeque<E> this,  Object o) {
        return (o instanceof WriteOrder<?>) && contains((WriteOrder<?>) o);
    }

    // A fast-path containment check
    @org.checkerframework.dataflow.qual.Pure
      boolean contains( WriteOrderDeque<E> this,  WriteOrder<?> e) {
        return (e.getPreviousInWriteOrder() != null) || (e.getNextInWriteOrder() != null) || (e == first);
    }

    @org.checkerframework.dataflow.qual.Impure
    public   boolean remove( WriteOrderDeque<E> this,  Object o) {
        return (o instanceof WriteOrder<?>) && remove((E) o);
    }

    // A fast-path removal
    @org.checkerframework.dataflow.qual.Impure
    public   boolean remove( WriteOrderDeque<E> this, E e) {
        if (contains(e)) {
            unlink(e);
            return true;
        }
        return false;
    }

    @org.checkerframework.dataflow.qual.Pure
    public E getPrevious( WriteOrderDeque<E> this, E e) {
        return e.getPreviousInWriteOrder();
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void setPrevious( WriteOrderDeque<E> this, E e, E prev) {
        e.setPreviousInWriteOrder(prev);
    }

    @org.checkerframework.dataflow.qual.Pure
    public E getNext( WriteOrderDeque<E> this, E e) {
        return e.getNextInWriteOrder();
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void setNext( WriteOrderDeque<E> this, E e, E next) {
        e.setNextInWriteOrder(next);
    }

    /**
     * An element that is linked on the {@link Deque}.
     */
    interface WriteOrder<T extends WriteOrder<T>> {

        /**
         * Retrieves the previous element or <tt>null</tt> if either the element is unlinked or the first
         * element on the deque.
         */
        @org.checkerframework.dataflow.qual.Pure
        T getPreviousInWriteOrder( WriteOrder<T> this);

        /**
         * Sets the previous element or <tt>null</tt> if there is no link.
         */
        @org.checkerframework.dataflow.qual.SideEffectFree
        void setPreviousInWriteOrder(WriteOrder<T> this, T prev);

        /**
         * Retrieves the next element or <tt>null</tt> if either the element is unlinked or the last
         * element on the deque.
         */
        @org.checkerframework.dataflow.qual.Pure
        T getNextInWriteOrder( WriteOrder<T> this);

        /**
         * Sets the next element or <tt>null</tt> if there is no link.
         */
        @org.checkerframework.dataflow.qual.SideEffectFree
        void setNextInWriteOrder(WriteOrder<T> this, T next);
    }
}
