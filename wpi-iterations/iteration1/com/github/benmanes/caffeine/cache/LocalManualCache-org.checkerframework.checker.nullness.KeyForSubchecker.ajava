/*
 * Copyright 2015 Ben Manes. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.benmanes.caffeine.cache;

import java.util.Map;
import java.util.concurrent.ConcurrentMap;
import java.util.function.Function;
import javax.annotation.Nullable;
import com.github.benmanes.caffeine.cache.stats.CacheStats;

/**
 * This class provides a skeletal implementation of the {@link Cache} interface to minimize the
 * effort required to implement a {@link LocalCache}.
 *
 * @author ben.manes@gmail.com (Ben Manes)
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
interface LocalManualCache<C extends LocalCache<K, V>, K, V> extends Cache<K, V> {

    /**
     * Returns the backing {@link LocalCache} data store.
     */
    @org.checkerframework.dataflow.qual.Pure
    C cache( LocalManualCache<C, K, V> this);

    @org.checkerframework.dataflow.qual.Pure
    default   long estimatedSize( LocalManualCache<C, K, V> this) {
        return cache().estimatedSize();
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    default void cleanUp( LocalManualCache<C, K, V> this) {
        cache().cleanUp();
    }

    @org.checkerframework.dataflow.qual.Pure
    default V getIfPresent( LocalManualCache<C, K, V> this,  Object key) {
        return cache().getIfPresent(key, /* recordStats */
        true);
    }

    @org.checkerframework.dataflow.qual.Pure
    default V get( LocalManualCache<C, K, V> this, K key,  Function<? super K, ? extends V> mappingFunction) {
        return cache().computeIfAbsent(key, mappingFunction);
    }

    @org.checkerframework.dataflow.qual.Pure
    default  Map<K, V> getAllPresent( LocalManualCache<C, K, V> this,  Iterable<?> keys) {
        return cache().getAllPresent(keys);
    }

    @org.checkerframework.dataflow.qual.Impure
    default void put( LocalManualCache<C, K, V> this, K key, V value) {
        cache().put(key, value);
    }

    @org.checkerframework.dataflow.qual.Impure
    default void putAll( LocalManualCache<C, K, V> this,  Map<? extends K, ? extends V> map) {
        cache().putAll(map);
    }

    @org.checkerframework.dataflow.qual.Impure
    default void invalidate( LocalManualCache<C, K, V> this,  Object key) {
        cache().remove(key);
    }

    @org.checkerframework.dataflow.qual.Impure
    default void invalidateAll( LocalManualCache<C, K, V> this,  Iterable<?> keys) {
        cache().invalidateAll(keys);
    }

    @org.checkerframework.dataflow.qual.Impure
    default void invalidateAll( LocalManualCache<C, K, V> this) {
        cache().clear();
    }

    @org.checkerframework.dataflow.qual.Pure
    default  CacheStats stats( LocalManualCache<C, K, V> this) {
        return cache().statsCounter().snapshot();
    }

    @org.checkerframework.dataflow.qual.Pure
    default ConcurrentMap<K, V> asMap( LocalManualCache<C, K, V> this) {
        return cache();
    }
}
