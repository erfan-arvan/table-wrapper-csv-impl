// Generated by delombok at Wed Aug 14 06:36:47 EDT 2024
/*
 * Table Wrapper CSV Impl
 * Copyright (C) 2022  Spacious Team <spacious-team@ya.ru>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package org.spacious_team.table_wrapper.csv;

import org.spacious_team.table_wrapper.api.AbstractTableCell;
import java.util.Objects;
import static lombok.AccessLevel.PACKAGE;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class CsvTableCell extends AbstractTableCell<CsvTableCell.RowAndIndex> {

    private final  RowAndIndex rowAndIndex;

    @org.checkerframework.dataflow.qual.Pure
    public static  CsvTableCell of( String  [] row,   int columnIndex) {
        return new CsvTableCell(new RowAndIndex(row, columnIndex));
    }

    @org.checkerframework.dataflow.qual.Pure
    public static  CsvTableCell of(String[] row, int columnIndex, CsvCellDataAccessObject dao) {
        return new CsvTableCell(new RowAndIndex(row, columnIndex), dao);
    }

    @org.checkerframework.dataflow.qual.Impure
    public CsvTableCell( RowAndIndex rowAndIndex) {
        this(rowAndIndex, CsvCellDataAccessObject.INSTANCE);
    }

    @org.checkerframework.dataflow.qual.Impure
    public CsvTableCell( RowAndIndex rowAndIndex,  CsvCellDataAccessObject dao) {
        super(rowAndIndex, dao);
        this.rowAndIndex = rowAndIndex;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int getColumnIndex( CsvTableCell this) {
        return rowAndIndex.getColumnIndex();
    }

    static final class RowAndIndex {

        private final String[] row;

        private final int columnIndex;

        @org.checkerframework.dataflow.qual.Pure
         String getValue( RowAndIndex this) {
            return checkIndex() ? row[columnIndex] : null;
        }

        @org.checkerframework.dataflow.qual.Pure
        private   boolean checkIndex( RowAndIndex this) {
            return columnIndex >= 0 && columnIndex < row.length;
        }

        @org.checkerframework.dataflow.qual.Pure
        public   boolean equals( RowAndIndex this,  Object obj) {
            if (obj == this) {
                return true;
            } else if (!(obj instanceof RowAndIndex)) {
                return false;
            }
            RowAndIndex other = (RowAndIndex) obj;
            return checkIndex() && other.checkIndex() && Objects.equals(getValue(), other.getValue());
        }

        @org.checkerframework.dataflow.qual.Pure
        public   int hashCode( RowAndIndex this) {
            return Objects.hashCode(getValue());
        }

        @org.checkerframework.dataflow.qual.SideEffectFree
        public RowAndIndex(final  String  [] row, final   int columnIndex) {
            this.row = row;
            this.columnIndex = columnIndex;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getColumnIndex() {
            return this.columnIndex;
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean equals(final java.lang.Object o) {
        if (o == this)
            return true;
        if (!(o instanceof CsvTableCell))
            return false;
        final CsvTableCell other = (CsvTableCell) o;
        if (!other.canEqual((java.lang.Object) this))
            return false;
        final java.lang.Object this$rowAndIndex = this.getRowAndIndex();
        final java.lang.Object other$rowAndIndex = other.getRowAndIndex();
        if (this$rowAndIndex == null ? other$rowAndIndex != null : !this$rowAndIndex.equals(other$rowAndIndex))
            return false;
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof CsvTableCell;
    }

    @org.checkerframework.dataflow.qual.Pure
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $rowAndIndex = this.getRowAndIndex();
        result = result * PRIME + ($rowAndIndex == null ? 43 : $rowAndIndex.hashCode());
        return result;
    }

    @org.checkerframework.dataflow.qual.Pure
    RowAndIndex getRowAndIndex() {
        return this.rowAndIndex;
    }
}
