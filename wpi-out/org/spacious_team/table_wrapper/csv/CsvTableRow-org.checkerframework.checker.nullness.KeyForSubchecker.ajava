// Generated by delombok at Wed Aug 14 06:24:43 EDT 2024
/*
 * Table Wrapper CSV Impl
 * Copyright (C) 2022  Spacious Team <spacious-team@ya.ru>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package org.spacious_team.table_wrapper.csv;

import org.checkerframework.checker.nullness.qual.Nullable;
import org.spacious_team.table_wrapper.api.AbstractReportPageRow;
import org.spacious_team.table_wrapper.api.TableCell;
import java.util.Iterator;
import java.util.NoSuchElementException;
import static org.spacious_team.table_wrapper.api.TableCellAddress.NOT_FOUND;
import static org.spacious_team.table_wrapper.csv.CsvTableHelper.equalsPredicate;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class CsvTableRow extends AbstractReportPageRow {

    private final  String  [] row;

    private final   int rowNum;

    private final  TableCell  [] cellsCache;

    @org.checkerframework.dataflow.qual.Pure
    public static  CsvTableRow of( String  [] row,   int rowNum) {
        return new CsvTableRow(row, rowNum);
    }

    @org.checkerframework.dataflow.qual.Impure
    private CsvTableRow( String  [] row,   int rowNum) {
        this.row = row;
        this.rowNum = rowNum;
        this.cellsCache = new TableCell[row.length];
    }

    @org.checkerframework.dataflow.qual.Impure
    public  TableCell getCell( CsvTableRow this,   int i) {
        if (i < 0 || i >= row.length) {
            return null;
        }
        TableCell cell = cellsCache[i];
        if (cell == null) {
            cell = CsvTableCell.of(row, i);
            cellsCache[i] = cell;
        }
        return cell;
    }

    @org.checkerframework.dataflow.qual.Pure
     String getCellValue( CsvTableRow this,   int i) {
        return (i < 0 || i >= row.length) ? null : row[i];
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int getFirstCellNum( CsvTableRow this) {
        return (row.length > 0) ? 0 : -1;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int getLastCellNum( CsvTableRow this) {
        return row.length - 1;
    }

    @org.checkerframework.dataflow.qual.Impure
    public   boolean rowContains( CsvTableRow this,  Object value) {
        return CsvTableHelper.find(row, rowNum, 0, row.length, equalsPredicate(value)) != NOT_FOUND;
    }

    @org.checkerframework.dataflow.qual.Impure
    public  Iterator<TableCell> iterator( CsvTableRow this) {
        return new Iterator<TableCell>() {

            private int cellIndex = 0;

            public boolean hasNext() {
                return cellIndex < row.length;
            }

            public TableCell next() {
                if (hasNext()) {
                    return getCell(cellIndex++);
                }
                throw new NoSuchElementException();
            }
        };
    }

    @org.checkerframework.dataflow.qual.Pure
    public java.lang.String toString() {
        return "CsvTableRow(rowNum=" + this.getRowNum() + ")";
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean equals(final java.lang.Object o) {
        if (o == this)
            return true;
        if (!(o instanceof CsvTableRow))
            return false;
        final CsvTableRow other = (CsvTableRow) o;
        if (!other.canEqual((java.lang.Object) this))
            return false;
        if (this.getRowNum() != other.getRowNum())
            return false;
        if (!java.util.Arrays.deepEquals(this.row, other.row))
            return false;
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof CsvTableRow;
    }

    @org.checkerframework.dataflow.qual.Pure
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getRowNum();
        result = result * PRIME + java.util.Arrays.deepHashCode(this.row);
        return result;
    }

    @org.checkerframework.dataflow.qual.Pure
    public int getRowNum() {
        return this.rowNum;
    }
}
