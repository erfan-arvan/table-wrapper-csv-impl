/*
 * Table Wrapper CSV Impl
 * Copyright (C) 2022  Spacious Team <spacious-team@ya.ru>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package org.spacious_team.table_wrapper.csv;

import com.univocity.parsers.csv.CsvParser;
import com.univocity.parsers.csv.CsvParserSettings;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.spacious_team.table_wrapper.api.AbstractReportPage;
import org.spacious_team.table_wrapper.api.TableCellAddress;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.function.Predicate;
import static java.nio.charset.StandardCharsets.UTF_8;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class CsvReportPage extends AbstractReportPage<CsvTableRow> {

    private final  String  []  [] rows;

    /**
     * Field and line delimiter detected automatically. UTF-8 encoded file expected.
     */
    @org.checkerframework.dataflow.qual.Impure
    public CsvReportPage(Path path) throws IOException {
        try (InputStream inputStream = Files.newInputStream(path, StandardOpenOption.READ)) {
            this.rows = readRows(inputStream, UTF_8, getDefaultCsvParserSettings());
        }
    }

    /**
     * Field and line delimiter detected automatically. UTF-8 encoded file expected.
     *
     * @implSpec Does not close inputStream
     */
    @org.checkerframework.dataflow.qual.Impure
    public CsvReportPage(InputStream inputStream) throws IOException {
        this(inputStream, UTF_8, getDefaultCsvParserSettings());
    }

    /**
     * @implSpec Does not close inputStream
     */
    @org.checkerframework.dataflow.qual.Impure
    public CsvReportPage( InputStream inputStream,  Charset charset,  CsvParserSettings csvParserSettings) throws IOException {
        CloseIgnoringInputStream closeIgnoringInputStream = new CloseIgnoringInputStream(inputStream);
        this.rows = readRows(closeIgnoringInputStream, charset, csvParserSettings);
    }

    /**
     * @implSpec Closes inputStream
     */
    @org.checkerframework.dataflow.qual.Impure
    private static  String  []  [] readRows( InputStream inputStream,  Charset charset,  CsvParserSettings csvParserSettings) throws IOException {
        try (Reader inputReader = new InputStreamReader(inputStream, charset)) {
            CsvParser parser = new CsvParser(csvParserSettings);
            return parser.parseAll(inputReader).toArray(new String[0][]);
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public CsvReportPage(String[][] cells) {
        this.rows = cells;
    }

    @org.checkerframework.dataflow.qual.Impure
    public static  CsvParserSettings getDefaultCsvParserSettings() {
        CsvParserSettings settings = new CsvParserSettings();
        settings.detectFormatAutomatically();
        return settings;
    }

    @org.checkerframework.dataflow.qual.Impure
    public  TableCellAddress find( CsvReportPage this,  Object value,   int startRow,   int endRow,   int startColumn,   int endColumn) {
        return CsvTableHelper.find(rows, value, startRow, endRow, startColumn, endColumn);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  TableCellAddress find( CsvReportPage this,   int startRow,   int endRow,   int startColumn,   int endColumn,  Predicate<Object> cellValuePredicate) {
        return CsvTableHelper.find(rows, startRow, endRow, startColumn, endColumn, cellValuePredicate::test);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  CsvTableRow getRow( CsvReportPage this,   int i) {
        return (i < 0 || i >= rows.length) ? null : CsvTableRow.of(rows[i], i);
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int getLastRowNum( CsvReportPage this) {
        return rows.length - 1;
    }
}
